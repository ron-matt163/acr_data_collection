[
    {
        "pr_title": "Customisable Shortcuts",
        "pr_number": 2311,
        "file_name": "src/gui/src/settings/options-window.cpp",
        "code_diff": "@@ -313,7 +313,7 @@\nOptionsWindow::OptionsWindow(Profile *profile, ThemeLoader *themeLoader, QWidget\n \t\tui->keyMainNewTab->setKeySequence(getKeySequence(settings, \"keyNewTab\", QKeySequence::AddTab, Qt::CTRL + Qt::Key_T));\n \t\tui->keyMainPrevTab->setKeySequence(getKeySequence(settings, \"keyPrevTab\", Qt::CTRL + Qt::Key_PageDown));\n \t\tui->keyMainNextTab->setKeySequence(getKeySequence(settings, \"keyNextTab\", Qt::CTRL + Qt::Key_PageUp));\n-\t\tui->keyMainBrowseSave->setKeySequence(getKeySequence(settings, \"keyBrowseSave\", QKeySequence::Open, Qt::CTRL + Qt::Key_B));\n+\t\tui->keyMainBrowseSave->setKeySequence(getKeySequence(settings, \"keyBrowseSave\", QKeySequence::Open, Qt::CTRL + Qt::Key_O));\n \tsettings->endGroup();\n \n \tui->checkResultsScrollArea->setChecked(settings->value(\"resultsScrollArea\", true).toBool());",
        "comments": [],
        "commit_message": "Standardize open destination shortcuts to use Ctrl+O",
        "commit_id": "2c43f89bb1e8308fe202202b016c87231e53cac5",
        "fn_context": "OptionsWindow::OptionsWindow(Profile *profile, ThemeLoader *themeLoader, QWidget *parent)\n\t: QDialog(parent), ui(new Ui::OptionsWindow), m_profile(profile), m_themeLoader(themeLoader)\n{\n\tAnalytics::getInstance().sendScreenView(\"Settings\");\n\n\tsetAttribute(Qt::WA_DeleteOnClose);\n\tui->setupUi(this);\n\n\tQSettings *settings = profile->getSettings();\n\n\tui->splitter->setSizes({ 160, ui->stackedWidget->sizeHint().width() });\n\tui->splitter->setStretchFactor(0, 0);\n\tui->splitter->setStretchFactor(1, 1);\n\n\tLanguageLoader languageLoader(savePath(\"languages/\", true, false));\n\tQMap<QString, QString> languages = languageLoader.getAllLanguages();\n\tfor (auto it = languages.constBegin(); it != languages.constEnd(); ++it) {\n\t\tui->comboLanguages->addItem(it.value(), it.key());\n\t}\n\n\tui->comboLanguages->setCurrentText(languages[settings->value(\"language\", \"English\").toString()]);\n\tui->lineWhitelist->setText(settings->value(\"whitelistedtags\").toString());\n\tui->lineAdd->setText(settings->value(\"add\").toString());\n\tui->lineGlobalPostFilter->setText(settings->value(\"globalPostFilter\").toString());\n\tui->checkGlobalPostFilterExplicit->setChecked(settings->value(\"globalPostFilterExplicit\", false).toBool());\n\tconst QStringList wl { \"never\", \"image\", \"page\" };\n\tui->comboWhitelist->setCurrentIndex(wl.indexOf(settings->value(\"whitelist_download\", \"image\").toString()));\n\tconst QStringList starts { \"none\", \"loadfirst\", \"restore\" };\n\tui->comboStart->setCurrentIndex(starts.indexOf(settings->value(\"start\", \"restore\").toString()));\n\tui->spinHideFavorites->setValue(settings->value(\"hidefavorites\", 20).toInt());\n\tui->checkAutodownload->setChecked(settings->value(\"autodownload\", false).toBool());\n\tui->checkHideBlacklisted->setChecked(settings->value(\"hideblacklisted\", false).toBool());\n\tui->checkShowTagWarning->setChecked(settings->value(\"showtagwarning\", true).toBool());\n\tui->checkShowWarnings->setChecked(settings->value(\"showwarnings\", true).toBool());\n\tui->checkGetUnloadedPages->setChecked(settings->value(\"getunloadedpages\", false).toBool());\n\tui->checkInvertToggle->setChecked(settings->value(\"invertToggle\", false).toBool());\n\tui->checkConfirmClose->setChecked(settings->value(\"confirm_close\", true).toBool());\n\tui->checkSendUsageData->setChecked(settings->value(\"send_usage_data\", true).toBool());\n\tconst QList<int> checkForUpdates { 0, 24 * 60 * 60, 7 * 24 * 60 * 60, 30 * 24 * 60 * 60, -1 };\n\tui->comboCheckForUpdates->setCurrentIndex(checkForUpdates.indexOf(settings->value(\"check_for_updates\", 24 * 60 * 60).toInt()));\n\tui->lineTempPathOverride->setText(settings->value(\"tempPathOverride\").toString());\n\n\tui->spinImagesPerPage->setValue(settings->value(\"limit\", 20).toInt());\n\tui->spinColumns->setValue(settings->value(\"columns\", 1).toInt());\n\tconst QStringList sources { \"xml\", \"json\", \"regex\", \"rss\" };\n\tui->comboSource1->setCurrentIndex(sources.indexOf(settings->value(\"source_1\", \"xml\").toString()));\n\tui->comboSource2->setCurrentIndex(sources.indexOf(settings->value(\"source_2\", \"json\").toString()));\n\tui->comboSource3->setCurrentIndex(sources.indexOf(settings->value(\"source_3\", \"regex\").toString()));\n\tui->comboSource4->setCurrentIndex(sources.indexOf(settings->value(\"source_4\", \"rss\").toString()));\n\tui->spinAutoTagAdd->setValue(settings->value(\"tagsautoadd\", 10).toInt());\n\n\tQList<ConditionalFilename> filenames = getFilenames(settings);\n\tm_filenamesConditions = QList<QLineEdit*>();\n\tm_filenamesFilenames = QList<QLineEdit*>();\n\tfor (const auto &fn : filenames) {\n\t\tauto leCondition = new QLineEdit(fn.condition);\n\t\tauto leFilename = new QLineEdit(fn.filename.format());\n\t\tauto leFolder = new QLineEdit(fn.path);\n\n\t\tm_filenamesConditions.append(leCondition);\n\t\tm_filenamesFilenames.append(leFilename);\n\t\tm_filenamesFolders.append(leFolder);\n\n\t\tauto *layout = new QHBoxLayout;\n\t\tlayout->addWidget(leCondition);\n\t\tlayout->addWidget(leFilename);\n\t\tlayout->addWidget(leFolder);\n\t\tui->layoutConditionals->addLayout(layout);\n\t}\n\tconst QStringList types { \"text\", \"icon\", \"both\", \"hide\" };\n\tui->comboSources->setCurrentIndex(types.indexOf(settings->value(\"Sources/Types\", \"icon\").toString()));\n\tint letterCount = settings->value(\"Sources/Letters\", 3).toInt();\n\tui->comboSourcesLetters->setCurrentIndex((letterCount < 0 ? 1 : 0) + (letterCount < -1 ? 1 : 0));\n\tui->spinSourcesLetters->setValue(letterCount < 0 ? 3 : letterCount);\n\tui->checkPreloadAllTabs->setChecked(settings->value(\"preloadAllTabs\", false).toBool());\n\n\tconst QStringList ftypes { \"ind\", \"in\", \"id\", \"nd\", \"i\", \"n\", \"d\" };\n\tui->comboFavoritesDisplay->setCurrentIndex(ftypes.indexOf(settings->value(\"favorites_display\", \"ind\").toString()));\n\n\t// Metadata using Windows Property System\n\t#ifndef WIN_FILE_PROPS\n\t\tui->groupMetadataPropsys->setEnabled(false);\n\t#else\n\t\tui->lineMetadataPropsysExtensions->setText(settings->value(\"Save/MetadataPropsysExtensions\", \"jpg jpeg mp4\").toString());\n\t\tconst QList<QPair<QString, QString>> metadataPropsys = getMetadataPropsys(settings);\n\t\tfor (const auto &pair : metadataPropsys) {\n\t\t\tauto *leKey = new QLineEdit(pair.first, this);\n\t\t\tauto *leValue = new QLineEdit(pair.second, this);\n\t\t\tui->layoutMetadataPropsys->addRow(leKey, leValue);\n\t\t\tm_metadataPropsys.append(QPair<QLineEdit*, QLineEdit*> { leKey, leValue });\n\t\t}\n\t#endif\n\n\t// Metadata using Exiftool\n\tQFuture<QString> future = QtConcurrent::run([=]() {\n\t\treturn Exiftool::version();\n\t});\n\tauto *watcher = new QFutureWatcher<QString>(this);\n\tconnect(watcher, &QFutureWatcher<QString>::finished, [=]() {\n\t\tconst QString &version = future.result();\n\t\tui->labelMetadataExiftoolVersion->setText(version.isEmpty() ? tr(\"exiftool not found\") : version);\n\t\tif (version.isEmpty()) {\n\t\t\tui->labelMetadataExiftoolVersion->setStyleSheet(\"color: red\");\n\t\t}\n\t});\n\twatcher->setFuture(future);\n\n\tui->lineMetadataExiftoolExtensions->setText(settings->value(\"Save/MetadataExiftoolExtensions\", \"jpg jpeg png gif mp4\").toString());\n\tconst QList<QPair<QString, QString>> metadataExiftool = getMetadataExiftool(settings);\n\tfor (const auto &pair : metadataExiftool) {\n\t\tauto *leKey = new QLineEdit(pair.first, this);\n\t\tauto *leValue = new QLineEdit(pair.second, this);\n\t\tui->layoutMetadataExiftool->addRow(leKey, leValue);\n\t\tm_metadataExiftool.append(QPair<QLineEdit*, QLineEdit*> { leKey, leValue });\n\t}\n\n\t// Log\n\tsettings->beginGroup(\"Log\");\n\t\tui->checkShowLog->setChecked(settings->value(\"show\", true).toBool());\n\tsettings->endGroup();\n\n\t// Blacklist\n\tui->textBlacklist->setPlainText(profile->getBlacklist().toString());\n\tui->checkDownloadBlacklisted->setChecked(settings->value(\"downloadblacklist\", false).toBool());\n\tnew SearchSyntaxHighlighter(false, ui->textBlacklist->document());\n\n\t// Ignored tags\n\tui->textRemovedTags->setPlainText(settings->value(\"ignoredtags\").toString());\n\tui->textIgnoredTags->setPlainText(profile->getIgnored().join('\\n'));\n\n\t// Monitoring\n\tsettings->beginGroup(\"Monitoring\");\n\t\tui->spinMonitoringStartupDelay->setValue(settings->value(\"startupDelay\", 0).toInt());\n\t\tui->checkMonitoringEnableTray->setChecked(settings->value(\"enableTray\", false).toBool());\n\t\tui->checkMonitoringMinimizeToTray->setChecked(settings->value(\"minimizeToTray\", false).toBool());\n\t\tui->checkMonitoringCloseToTray->setChecked(settings->value(\"closeToTray\", false).toBool());\n\tsettings->endGroup();\n\n\tui->checkResizeInsteadOfCropping->setChecked(settings->value(\"resizeInsteadOfCropping\", true).toBool());\n\tui->spinThumbnailUpscale->setValue(qRound(settings->value(\"thumbnailUpscale\", 1.0).toDouble() * 100));\n\tui->checkAutocompletion->setChecked(settings->value(\"autocompletion\", true).toBool());\n\tui->checkUseregexfortags->setChecked(settings->value(\"useregexfortags\", true).toBool());\n\tQStringList infiniteScroll { \"disabled\", \"button\", \"scroll\" };\n\tui->comboInfiniteScroll->setCurrentIndex(infiniteScroll.indexOf(settings->value(\"infiniteScroll\", \"disabled\").toString()));\n\tui->checkInfiniteScrollRememberPage->setChecked(settings->value(\"infiniteScrollRememberPage\", false).toBool());\n\n\t// Resize\n\tsettings->beginGroup(\"ImageSize\");\n\t\tui->spinResizeMaxWidth->setValue(settings->value(\"maxWidth\", 1000).toInt());\n\t\tui->checkResizeMaxWidth->setChecked(settings->value(\"maxWidthEnabled\", false).toBool());\n\t\tui->spinResizeMaxHeight->setValue(settings->value(\"maxHeight\", 1000).toInt());\n\t\tui->checkResizeMaxHeight->setChecked(settings->value(\"maxHeightEnabled\", false).toBool());\n\tsettings->endGroup();\n\n\t// External log files\n\tshowLogFiles(settings);\n\n\t// Web services\n\tReverseSearchLoader loader(settings);\n\tm_webServices = loader.getAllReverseSearchEngines();\n\tshowWebServices();\n\n\tui->comboBatchEnd->setCurrentIndex(settings->value(\"Batch/end\", 0).toInt());\n\tsettings->beginGroup(\"Save\");\n\t\t#ifdef Q_OS_WIN\n\t\t\tstatic const QStringList linkKeys { \"link\", /*\"symlink\",*/ \"hardlink\" };\n\t\t\tstatic const QStringList linkValues { tr(\"Shortcut\"), /*tr(\"Symbolic link\"),*/ tr(\"Hard link\") };\n\t\t#else\n\t\t\tstatic const QStringList linkKeys { \"link\", \"hardlink\" };\n\t\t\tstatic const QStringList linkValues { tr(\"Symbolic link\"), tr(\"Hard link\") };\n\t\t#endif\n\n\t\tui->spinAutomaticRetries->setValue(settings->value(\"automaticretries\", 0).toInt());\n\t\tui->checkDownloadOriginals->setChecked(settings->value(\"downloadoriginals\", true).toBool());\n\t\tui->checkSampleFallback->setChecked(settings->value(\"samplefallback\", true).toBool());\n\t\tui->checkReplaceBlanks->setChecked(settings->value(\"replaceblanks\", false).toBool());\n\t\tui->checkKeepDate->setChecked(settings->value(\"keepDate\", true).toBool());\n\t\tui->checkSaveHeaderDetection->setChecked(settings->value(\"headerDetection\", true).toBool());\n\t\tui->lineFolder->setText(settings->value(\"path_real\").toString());\n\t\tui->lineFolderFavorites->setText(settings->value(\"path_favorites\").toString());\n\t\tQStringList md5Duplicates { \"save\", \"copy\", \"move\", \"ignore\" };\n\t\tmd5Duplicates.append(linkKeys);\n\t\tui->comboMd5Duplicates->addItems(linkValues);\n\t\tui->comboMd5DuplicatesSameDir->addItems(linkValues);\n\t\tui->comboMd5Duplicates->setCurrentIndex(md5Duplicates.indexOf(settings->value(\"md5Duplicates\", \"save\").toString()));\n\t\tui->comboMd5DuplicatesSameDir->setCurrentIndex(md5Duplicates.indexOf(settings->value(\"md5DuplicatesSameDir\", \"save\").toString()));\n\t\tui->checkKeepDeletedMd5->setChecked(settings->value(\"keepDeletedMd5\", false).toBool());\n\t\tQStringList multipleFiles { \"copy\" };\n\t\tmultipleFiles.append(linkKeys);\n\t\tui->comboMultipleFiles->addItems(linkValues);\n\t\tui->comboMultipleFiles->setCurrentIndex(multipleFiles.indexOf(settings->value(\"multiple_files\", \"copy\").toString()));\n\n\t\t#ifdef Q_OS_WIN\n\t\t\t// On Windows, you might need elevated privileges to create some types of links\n\t\t\tif (!canCreateLinkType(\"hardlink\", m_profile->tempPath())) {\n\t\t\t\tconst QString &toolTip(\"You need to run Grabber as administrator to create hard links\");\n\t\t\t\tdisableItem(ui->comboMd5Duplicates, 5, toolTip);\n\t\t\t\tdisableItem(ui->comboMd5DuplicatesSameDir, 5, toolTip);\n\t\t\t\tdisableItem(ui->comboMultipleFiles, 2, toolTip);\n\t\t\t}\n\t\t#endif\n\n\t\tui->lineFilename->setText(settings->value(\"filename_real\").toString());\n\t\tui->lineFavorites->setText(settings->value(\"filename_favorites\").toString());\n\t\tui->lineSeparator->setText(settings->value(\"separator\", \" \").toString());\n\t\tui->checkNoJpeg->setChecked(settings->value(\"noJpeg\", true).toBool());\n\n\n\t\t// Build the \"tags\" settings\n\t\tauto tagsTree = ui->treeWidget->invisibleRootItem()->child(2)->child(5);\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Artist\" }, tagsTree->type()));\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Copyright\" }, tagsTree->type()));\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Character\" }, tagsTree->type()));\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Model\" }, tagsTree->type()));\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Photo set\" }, tagsTree->type()));\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Species\" }, tagsTree->type()));\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Meta\" }, tagsTree->type()));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"artist\", false, \"anonymous\", \"multiple artists\", this));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"copyright\", true, \"misc\", \"crossover\", this));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"character\", false, \"unknown\", \"group\", this));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"model\", false, \"unknown\", \"multiple\", this));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"photo_set\", false, \"unknown\", \"multiple\", this));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"species\", false, \"unknown\", \"multiple\", this));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"meta\", false, \"none\", \"multiple\", this));\n\t\tfor (int i = 0; i < m_tokenSettings.count(); ++i) {\n\t\t\tui->stackedWidget->insertWidget(i + 9, m_tokenSettings[i]);\n\t\t}\n\n\t\tui->spinLimit->setValue(settings->value(\"limit\", 0).toInt());\n\t\tui->spinSimultaneous->setValue(settings->value(\"simultaneous\", 1).toInt());\n\tsettings->endGroup();\n\n\t// Custom tokens\n\tQMap<QString, QStringList> customs = getCustoms(settings);\n\tm_customNames = QList<QLineEdit*>();\n\tm_customTags = QList<QLineEdit*>();\n\tint i = 0;\n\tfor (auto it = customs.constBegin(); it != customs.constEnd(); ++it) {\n\t\tauto *leName = new QLineEdit(it.key());\n\t\tauto *leTags = new QLineEdit(it.value().join(\" \"));\n\t\tm_customNames.append(leName);\n\t\tm_customTags.append(leTags);\n\t\tui->layoutCustom->insertRow(i++, leName, leTags);\n\t}\n\n\t// Themes\n\tQStringList themes = m_themeLoader->getAllThemes();\n\tfor (const QString &theme : themes) {\n\t\tui->comboTheme->addItem(theme, theme);\n\t}\n\tui->comboTheme->setCurrentText(settings->value(\"theme\", \"Default\").toString());\n\n\tui->checkSingleDetailsWindow->setChecked(settings->value(\"Zoom/singleWindow\", false).toBool());\n\tconst QStringList positions { \"top\", \"left\", \"auto\" };\n\tui->comboTagsPosition->setCurrentIndex(positions.indexOf(settings->value(\"tagsposition\", \"top\").toString()));\n\tui->spinPreload->setValue(settings->value(\"preload\", 0).toInt());\n\tui->spinSlideshow->setValue(settings->value(\"slideshow\", 0).toInt());\n\n\tsettings->beginGroup(\"Main/Shortcuts\");\n\t\tui->keyMainQuit->setKeySequence(getKeySequence(settings, \"keyQuit\", QKeySequence::Quit, Qt::CTRL + Qt::Key_Q));\n\t\tui->keyMainFocusSearch->setKeySequence(getKeySequence(settings, \"keyFocusSearch\", Qt::CTRL + Qt::Key_L));\n\t\tui->keyMainCloseTab->setKeySequence(getKeySequence(settings, \"keyCloseTab\", Qt::CTRL + Qt::Key_W));\n\t\tui->keyMainNewTab->setKeySequence(getKeySequence(settings, \"keyNewTab\", QKeySequence::AddTab, Qt::CTRL + Qt::Key_T));\n\t\tui->keyMainPrevTab->setKeySequence(getKeySequence(settings, \"keyPrevTab\", Qt::CTRL + Qt::Key_PageDown));\n\t\tui->keyMainNextTab->setKeySequence(getKeySequence(settings, \"keyNextTab\", Qt::CTRL + Qt::Key_PageUp));\n\t\tui->keyMainBrowseSave->setKeySequence(getKeySequence(settings, \"keyBrowseSave\", QKeySequence::Open, Qt::CTRL + Qt::Key_O));\n\tsettings->endGroup();\n\n\tui->checkResultsScrollArea->setChecked(settings->value(\"resultsScrollArea\", true).toBool());\n\tui->checkResultsFixedWidthLayout->setChecked(settings->value(\"resultsFixedWidthLayout\", false).toBool());\n\tui->checkImageCloseMiddleClick->setChecked(settings->value(\"imageCloseMiddleClick\", true).toBool());\n\tui->checkImageNavigateScroll->setChecked(settings->value(\"imageNavigateScroll\", true).toBool());\n\tui->checkZoomShowTagCount->setChecked(settings->value(\"Zoom/showTagCount\", false).toBool());\n\tui->checkZoomViewSamples->setChecked(settings->value(\"Zoom/viewSamples\", false).toBool());\n\tui->checkImageScaleUp->setChecked(settings->value(\"Zoom/scaleUp\", false).toBool());\n\tui->checkImageUseVideoPlayer->setChecked(settings->value(\"Zoom/useVideoPlayer\", true).toBool());\n\tui->checkImageVideoControls->setChecked(settings->value(\"Zoom/showVideoPlayerControls\", true).toBool());\n\tui->checkImageGifControls->setChecked(settings->value(\"Zoom/showGifPlayerControls\", true).toBool());\n\tconst QStringList imageTagOrder { \"type\", \"name\", \"count\" };\n\tui->comboImageTagOrder->setCurrentIndex(imageTagOrder.indexOf(settings->value(\"Zoom/tagOrder\", \"type\").toString()));\n\tconst QStringList positionsV { \"top\", \"center\", \"bottom\" };\n\tconst QStringList positionsH { \"left\", \"center\", \"right\" };\n\tui->comboImagePositionImageV->setCurrentIndex(positionsV.indexOf(settings->value(\"imagePositionImageV\", \"center\").toString()));\n\tui->comboImagePositionImageH->setCurrentIndex(positionsH.indexOf(settings->value(\"imagePositionImageH\", \"left\").toString()));\n\tui->comboImagePositionAnimationV->setCurrentIndex(positionsV.indexOf(settings->value(\"imagePositionAnimationV\", \"center\").toString()));\n\tui->comboImagePositionAnimationH->setCurrentIndex(positionsH.indexOf(settings->value(\"imagePositionAnimationH\", \"left\").toString()));\n\tui->comboImagePositionVideoV->setCurrentIndex(positionsV.indexOf(settings->value(\"imagePositionVideoV\", \"center\").toString()));\n\tui->comboImagePositionVideoH->setCurrentIndex(positionsH.indexOf(settings->value(\"imagePositionVideoH\", \"left\").toString()));\n\tui->lineImageBackgroundColor->setText(settings->value(\"imageBackgroundColor\", QString()).toString());\n\n\tsettings->beginGroup(\"Zoom/Shortcuts\");\n\t\tui->keyViewerQuit->setKeySequence(getKeySequence(settings, \"keyQuit\", Qt::Key_Escape));\n\t\tui->keyViewerPrev->setKeySequence(getKeySequence(settings, \"keyPrev\", Qt::Key_Left));\n\t\tui->keyViewerNext->setKeySequence(getKeySequence(settings, \"keyNext\", Qt::Key_Right));\n\t\tui->keyViewerDetails->setKeySequence(getKeySequence(settings, \"keyDetails\", Qt::Key_D));\n\t\tui->keyViewerSaveAs->setKeySequence(getKeySequence(settings, \"keySaveAs\", QKeySequence::SaveAs, Qt::CTRL + Qt::SHIFT + Qt::Key_S));\n\t\tui->keyViewerSave->setKeySequence(getKeySequence(settings, \"keySave\", QKeySequence::Save, Qt::CTRL + Qt::Key_S));\n\t\tui->keyViewerSaveNQuit->setKeySequence(getKeySequence(settings, \"keySaveNQuit\", Qt::CTRL + Qt::Key_W));\n\t\tui->keyViewerOpen->setKeySequence(getKeySequence(settings, \"keyOpen\", Qt::CTRL + Qt::Key_O));\n\t\tui->keyViewerSaveFav->setKeySequence(getKeySequence(settings, \"keySaveFav\", Qt::CTRL + Qt::ALT + Qt::Key_S));\n\t\tui->keyViewerSaveNQuitFav->setKeySequence(getKeySequence(settings, \"keySaveNQuitFav\", Qt::CTRL + Qt::ALT + Qt::Key_W));\n\t\tui->keyViewerOpenFav->setKeySequence(getKeySequence(settings, \"keyOpenFav\", Qt::CTRL + Qt::ALT + Qt::Key_O));\n\t\tui->keyViewerToggleSlideshow->setKeySequence(getKeySequence(settings, \"keyToggleSlideshow\", Qt::Key_Space));\n\t\tui->keyViewerToggleFullscreen->setKeySequence(getKeySequence(settings, \"keyToggleFullscreen\", QKeySequence::FullScreen, Qt::Key_F11));\n\t\tui->keyViewerDataToClipboard->setKeySequence(getKeySequence(settings, \"keyDataToClipboard\", QKeySequence::Copy, Qt::CTRL + Qt::Key_C));\n\tsettings->endGroup();\n\n\tsettings->beginGroup(\"Coloring\");\n\t\tsettings->beginGroup(\"Colors\");\n\t\t\tui->lineColoringArtists->setText(settings->value(\"artists\", \"#aa0000\").toString());\n\t\t\tui->lineColoringCircles->setText(settings->value(\"circles\", \"#55bbff\").toString());\n\t\t\tui->lineColoringCopyrights->setText(settings->value(\"copyrights\", \"#aa00aa\").toString());\n\t\t\tui->lineColoringCharacters->setText(settings->value(\"characters\", \"#00aa00\").toString());\n\t\t\tui->lineColoringSpecies->setText(settings->value(\"species\", \"#ee6600\").toString());\n\t\t\tui->lineColoringMetas->setText(settings->value(\"metas\", \"#ee6600\").toString());\n\t\t\tui->lineColoringModels->setText(settings->value(\"models\", \"#0000ee\").toString());\n\t\t\tui->lineColoringGenerals->setText(settings->value(\"generals\", \"#000000\").toString());\n\t\t\tui->lineColoringFavorites->setText(settings->value(\"favorites\", \"#ffc0cb\").toString());\n\t\t\tui->lineColoringKeptForLater->setText(settings->value(\"keptForLater\", \"#000000\").toString());\n\t\t\tui->lineColoringBlacklisteds->setText(settings->value(\"blacklisteds\", \"#000000\").toString());\n\t\t\tui->lineColoringIgnoreds->setText(settings->value(\"ignoreds\", \"#999999\").toString());\n\t\tsettings->endGroup();\n\t\tsettings->beginGroup(\"Fonts\");\n\t\t\tui->lineColoringArtists->setFont(qFontFromString(settings->value(\"artists\").toString()));\n\t\t\tui->lineColoringCircles->setFont(qFontFromString(settings->value(\"circles\").toString()));\n\t\t\tui->lineColoringCopyrights->setFont(qFontFromString(settings->value(\"copyrights\").toString()));\n\t\t\tui->lineColoringCharacters->setFont(qFontFromString(settings->value(\"characters\").toString()));\n\t\t\tui->lineColoringSpecies->setFont(qFontFromString(settings->value(\"species\").toString()));\n\t\t\tui->lineColoringMetas->setFont(qFontFromString(settings->value(\"metas\").toString()));\n\t\t\tui->lineColoringModels->setFont(qFontFromString(settings->value(\"models\").toString()));\n\t\t\tui->lineColoringGenerals->setFont(qFontFromString(settings->value(\"generals\").toString()));\n\t\t\tui->lineColoringFavorites->setFont(qFontFromString(settings->value(\"favorites\").toString()));\n\t\t\tui->lineColoringKeptForLater->setFont(qFontFromString(settings->value(\"keptForLater\").toString()));\n\t\t\tui->lineColoringBlacklisteds->setFont(qFontFromString(settings->value(\"blacklisteds\").toString()));\n\t\t\tui->lineColoringIgnoreds->setFont(qFontFromString(settings->value(\"ignoreds\").toString()));\n\t\tsettings->endGroup();\n\tsettings->endGroup();\n\n\tsettings->beginGroup(\"Margins\");\n\t\tui->spinMainMargins->setValue(settings->value(\"main\", 10).toInt());\n\t\tui->spinHorizontalMargins->setValue(settings->value(\"horizontal\", 6).toInt());\n\t\tui->spinVerticalMargins->setValue(settings->value(\"vertical\", 6).toInt());\n\tsettings->endGroup();\n\tui->spinServerBorders->setValue(settings->value(\"serverBorder\", 0).toInt());\n\tui->lineBorderColor->setText(settings->value(\"serverBorderColor\", \"#000000\").toString());\n\tui->spinBorders->setValue(settings->value(\"borders\", 3).toInt());\n\n\tsettings->beginGroup(\"Proxy\");\n\t\tui->checkProxyUse->setChecked(settings->value(\"use\", false).toBool());\n\t\tui->checkProxyUseSystem->setChecked(settings->value(\"useSystem\", false).toBool());\n\t\tconst QStringList ptypes { \"http\", \"socks5\" };\n\t\tui->comboProxyType->setCurrentIndex(ptypes.indexOf(settings->value(\"type\", \"http\").toString()));\n\t\tui->widgetProxy->setEnabled(settings->value(\"use\", false).toBool());\n\t\tui->lineProxyHostName->setText(settings->value(\"hostName\").toString());\n\t\tui->spinProxyPort->setValue(settings->value(\"port\").toInt());\n\t\tui->lineProxyUser->setText(settings->value(\"user\").toString());\n\t\tui->lineProxyPassword->setText(settings->value(\"password\").toString());\n\tsettings->endGroup();\n\n\tsettings->beginGroup(\"Exec\");\n\t\tui->lineCommandsTagBefore->setText(settings->value(\"tag_before\").toString());\n\t\tui->lineCommandsImage->setText(settings->value(\"image\").toString());\n\t\tui->lineCommandsTagAfter->setText(settings->value(\"tag_after\", settings->value(\"tag\").toString()).toString());\n\t\tsettings->beginGroup(\"SQL\");\n\t\t\tui->comboCommandsSqlDriver->addItems(QSqlDatabase::drivers());\n\t\t\tui->comboCommandsSqlDriver->setCurrentIndex(QSqlDatabase::drivers().indexOf(settings->value(\"driver\", \"QMYSQL\").toString()));\n\t\t\tui->lineCommandsSqlHost->setText(settings->value(\"host\").toString());\n\t\t\tui->lineCommandsSqlUser->setText(settings->value(\"user\").toString());\n\t\t\tui->lineCommandsSqlPassword->setText(settings->value(\"password\").toString());\n\t\t\tui->lineCommandsSqlDatabase->setText(settings->value(\"database\").toString());\n\t\t\tui->lineCommandsSqlBefore->setText(settings->value(\"before\").toString());\n\t\t\tui->lineCommandsSqlTagBefore->setText(settings->value(\"tag_before\").toString());\n\t\t\tui->lineCommandsSqlImage->setText(settings->value(\"image\").toString());\n\t\t\tui->lineCommandsSqlTagAfter->setText(settings->value(\"tag_after\", settings->value(\"tag\").toString()).toString());\n\t\t\tui->lineCommandsSqlAfter->setText(settings->value(\"after\").toString());\n\t\tsettings->endGroup();\n\tsettings->endGroup();\n\n\tconnect(this, &QDialog::accepted, this, &OptionsWindow::save);\n}"
    },
    {
        "pr_title": "Viewer buttons",
        "pr_number": 2291,
        "file_name": "src/gui/src/settings/options-window.cpp",
        "code_diff": "@@ -350,9 +350,8 @@\nOptionsWindow::OptionsWindow(Profile *profile, ThemeLoader *themeLoader, QWidget\n \tlog(\"+++Reading Zoom/Buttons+++\", Logger::Debug);\n \tinitButtonSettingPairs();\n \tloadButtonSettings(settings);\n-\tlog(\"---Reading Zoom/Buttons---\", Logger::Debug);\n-\n \tcheckAllSpinners();\n+\tlog(\"---Reading Zoom/Buttons---\", Logger::Debug);\n \n \tsettings->beginGroup(\"Zoom/Shortcuts\");\n \t\tui->keyViewerQuit->setKeySequence(getKeySequence(settings, \"keyQuit\", Qt::Key_Escape));",
        "comments": [
            {
                "comment": "Rather than clearing everything and re-adding values, you could just use `setItemData()`.",
                "position": null
            },
            {
                "comment": "Shouldn't the default be `ZoomWindow::ButtonVisibility::All` instead? Otherwise you're casting a string here.",
                "position": null
            },
            {
                "comment": "Since you bothered to  set the item data above, you can just use `currentData()` to get the enum value directly. It's a QVariant so you might need to cast to to an int with `toInt`.",
                "position": null
            },
            {
                "comment": "If you don't want to use `setItemData`, make sure you wrap all translatable strings with the `tr()` function to make sure they're translatable.",
                "position": null
            },
            {
                "comment": "When creating new settings, try to keep them in their setting  group if possible. Here, it would be \"Zoom/actionButtons\". This allows the setting file to be more readable later. For ini files for example, it will put them in a  `[Zoom]` section together with other image  window-related settings.",
                "position": null
            },
            {
                "comment": "There are still references to ZoomWindow's enum, but those could be changed to a different namespace as I noted elsewhere.",
                "position": null
            },
            {
                "comment": "Yes, I strongly believe it would make sense to extract them to another file.\r\nIt would perfectly fit in \"custom-buttons\".",
                "position": null
            },
            {
                "comment": "Note that this won't work for:\r\n* Existing users (when I tried for examples)\r\n* New users that don't open the settings window from the \"first load\" window\r\n\r\nI think you'd be better off introducing another flag, such as \"firstload-settings\" or something.",
                "position": null
            },
            {
                "comment": "You should really start using for-range loops when using C++, it's just much more elegant \ud83d\ude01\r\nI'll push a style commit for this kind of stuff, so you can ignore this comment.",
                "position": null
            },
            {
                "comment": "Since you have the list in csPairs, you could iterate  on them?\r\nYou can do all those connections in the UI file directly, which would be even better.",
                "position": null
            },
            {
                "comment": "I thought the ZoomWindow should fall back on the intended default configuration when settings are not available. Maybe that got broken. I will investigate.",
                "position": null
            },
            {
                "comment": "They are more elegant. I have been trying to use them more since you mentioned it before but this code is from a while back. I do think there's some advantage to knowing what kind of object is being iterated just by looking at the loop though, that's why I don't have a strong preference personally.",
                "position": null
            },
            {
                "comment": "Good ideas! I'll do that.",
                "position": null
            },
            {
                "comment": "The reason I didn't do that is because I wanted all the settings related to ZoomWindow to be accessible in the same file (zoom-window.h). It feels a little more sensible and easier to maintain when buttons need to be changed. I was also hoping to keep the constants in ZoomWindow's namespace but I didn't want to instantiate them redundantly. I think I commented somewhere about that, asking whether it would be appropriate to include them as static data members. Of course, we can put all that in custom-buttons.h if you prefer.",
                "position": null
            },
            {
                "comment": "I pushed an update that does everything there in one loop. Really not sure why I didn't do that to begin with. I also have a version that makes the connections in the .ui file, but if we use that then we will have to set blockSignals(true) and then blockSignals(false) for each \"checker\" and \"spinner\". I'm afraid that would be less efficient and make the code a little messier. Do you know?",
                "position": null
            },
            {
                "comment": "Doing it code-side allows for more flexibility so you can keep the loop instead of the UI change.",
                "position": null
            },
            {
                "comment": "So when I run Grabber for the first time, the settings are written without opening the options-window. [Here](https://github.com/Bionus/imgbrd-grabber/files/7269855/grabber.log) is an example log of the console output. Does it behave differently on other platforms?\r\n\r\nI will add that flag for existing users. I thought \"first load\" meant after installation or upgrade, not just when writing a new config file.\r\n\r\n",
                "position": null
            }
        ],
        "commit_message": "Simplify spinner checks in options window",
        "commit_id": "6f23036faa306840121a727c434196fd6e0971a3",
        "fn_context": "OptionsWindow::OptionsWindow(Profile *profile, ThemeLoader *themeLoader, QWidget *parent)\n\t: QDialog(parent), ui(new Ui::OptionsWindow), m_profile(profile), m_themeLoader(themeLoader)\n{\n\tAnalytics::getInstance().sendScreenView(\"Settings\");\n\n\tsetAttribute(Qt::WA_DeleteOnClose);\n\tui->setupUi(this);\n\n\tQSettings *settings = profile->getSettings();\n\tsetupDialogShortcuts(this, settings);\n\n\tui->splitter->setSizes({ 160, ui->stackedWidget->sizeHint().width() });\n\tui->splitter->setStretchFactor(0, 0);\n\tui->splitter->setStretchFactor(1, 1);\n\n\tLanguageLoader languageLoader(savePath(\"languages/\", true, false));\n\tQMap<QString, QString> languages = languageLoader.getAllLanguages();\n\tfor (auto it = languages.constBegin(); it != languages.constEnd(); ++it) {\n\t\tui->comboLanguages->addItem(it.value(), it.key());\n\t}\n\n\tui->comboLanguages->setCurrentText(languages[settings->value(\"language\", \"English\").toString()]);\n\tui->lineWhitelist->setText(settings->value(\"whitelistedtags\").toString());\n\tui->lineAdd->setText(settings->value(\"add\").toString());\n\tui->lineGlobalPostFilter->setText(settings->value(\"globalPostFilter\").toString());\n\tui->checkGlobalPostFilterExplicit->setChecked(settings->value(\"globalPostFilterExplicit\", false).toBool());\n\tconst QStringList wl { \"never\", \"image\", \"page\" };\n\tui->comboWhitelist->setCurrentIndex(wl.indexOf(settings->value(\"whitelist_download\", \"image\").toString()));\n\tconst QStringList starts { \"none\", \"loadfirst\", \"restore\" };\n\tui->comboStart->setCurrentIndex(starts.indexOf(settings->value(\"start\", \"restore\").toString()));\n\tui->spinHideFavorites->setValue(settings->value(\"hidefavorites\", 20).toInt());\n\tui->checkAutodownload->setChecked(settings->value(\"autodownload\", false).toBool());\n\tui->checkHideBlacklisted->setChecked(settings->value(\"hideblacklisted\", false).toBool());\n\tui->checkShowTagWarning->setChecked(settings->value(\"showtagwarning\", true).toBool());\n\tui->checkShowWarnings->setChecked(settings->value(\"showwarnings\", true).toBool());\n\tui->checkGetUnloadedPages->setChecked(settings->value(\"getunloadedpages\", false).toBool());\n\tui->checkInvertToggle->setChecked(settings->value(\"invertToggle\", false).toBool());\n\tui->checkConfirmClose->setChecked(settings->value(\"confirm_close\", true).toBool());\n\tui->checkSendUsageData->setChecked(settings->value(\"send_usage_data\", true).toBool());\n\tconst QList<int> checkForUpdates { 0, 24 * 60 * 60, 7 * 24 * 60 * 60, 30 * 24 * 60 * 60, -1 };\n\tui->comboCheckForUpdates->setCurrentIndex(checkForUpdates.indexOf(settings->value(\"check_for_updates\", 24 * 60 * 60).toInt()));\n\tui->lineTempPathOverride->setText(settings->value(\"tempPathOverride\").toString());\n\n\tui->spinImagesPerPage->setValue(settings->value(\"limit\", 20).toInt());\n\tui->spinColumns->setValue(settings->value(\"columns\", 1).toInt());\n\tconst QStringList sources { \"xml\", \"json\", \"regex\", \"rss\" };\n\tui->comboSource1->setCurrentIndex(sources.indexOf(settings->value(\"source_1\", \"xml\").toString()));\n\tui->comboSource2->setCurrentIndex(sources.indexOf(settings->value(\"source_2\", \"json\").toString()));\n\tui->comboSource3->setCurrentIndex(sources.indexOf(settings->value(\"source_3\", \"regex\").toString()));\n\tui->comboSource4->setCurrentIndex(sources.indexOf(settings->value(\"source_4\", \"rss\").toString()));\n\tui->spinAutoTagAdd->setValue(settings->value(\"tagsautoadd\", 10).toInt());\n\n\tQList<ConditionalFilename> filenames = getFilenames(settings);\n\tm_filenamesConditions = QList<QLineEdit*>();\n\tm_filenamesFilenames = QList<QLineEdit*>();\n\tfor (const auto &fn : filenames) {\n\t\tauto leCondition = new QLineEdit(fn.condition);\n\t\tauto leFilename = new QLineEdit(fn.filename.format());\n\t\tauto leFolder = new QLineEdit(fn.path);\n\n\t\tm_filenamesConditions.append(leCondition);\n\t\tm_filenamesFilenames.append(leFilename);\n\t\tm_filenamesFolders.append(leFolder);\n\n\t\tauto *layout = new QHBoxLayout;\n\t\tlayout->addWidget(leCondition);\n\t\tlayout->addWidget(leFilename);\n\t\tlayout->addWidget(leFolder);\n\t\tui->layoutConditionals->addLayout(layout);\n\t}\n\tconst QStringList types { \"text\", \"icon\", \"both\", \"hide\" };\n\tui->comboSources->setCurrentIndex(types.indexOf(settings->value(\"Sources/Types\", \"icon\").toString()));\n\tint letterCount = settings->value(\"Sources/Letters\", 3).toInt();\n\tui->comboSourcesLetters->setCurrentIndex((letterCount < 0 ? 1 : 0) + (letterCount < -1 ? 1 : 0));\n\tui->spinSourcesLetters->setValue(letterCount < 0 ? 3 : letterCount);\n\tui->checkPreloadAllTabs->setChecked(settings->value(\"preloadAllTabs\", false).toBool());\n\n\tconst QStringList ftypes { \"ind\", \"in\", \"id\", \"nd\", \"i\", \"n\", \"d\" };\n\tui->comboFavoritesDisplay->setCurrentIndex(ftypes.indexOf(settings->value(\"favorites_display\", \"ind\").toString()));\n\n\tui->keyAcceptDialogue->setKeySequence(getKeySequence(settings, \"keyAcceptDialog\", Qt::CTRL + Qt::Key_Y));\n\tui->keyDeclineDialogue->setKeySequence(getKeySequence(settings, \"keyDeclineDialog\", Qt::CTRL + Qt::Key_N));\n\n\t// Metadata using Windows Property System\n\t#ifndef WIN_FILE_PROPS\n\t\tui->groupMetadataPropsys->setEnabled(false);\n\t#else\n\t\tui->lineMetadataPropsysExtensions->setText(settings->value(\"Save/MetadataPropsysExtensions\", \"jpg jpeg mp4\").toString());\n\t\tconst QList<QPair<QString, QString>> metadataPropsys = getMetadataPropsys(settings);\n\t\tfor (const auto &pair : metadataPropsys) {\n\t\t\tauto *leKey = new QLineEdit(pair.first, this);\n\t\t\tauto *leValue = new QLineEdit(pair.second, this);\n\t\t\tui->layoutMetadataPropsys->addRow(leKey, leValue);\n\t\t\tm_metadataPropsys.append(QPair<QLineEdit*, QLineEdit*> { leKey, leValue });\n\t\t}\n\t#endif\n\n\t// Metadata using Exiftool\n\tQFuture<QString> future = QtConcurrent::run([=]() {\n\t\treturn Exiftool::version();\n\t});\n\tauto *watcher = new QFutureWatcher<QString>(this);\n\tconnect(watcher, &QFutureWatcher<QString>::finished, [=]() {\n\t\tconst QString &version = future.result();\n\t\tui->labelMetadataExiftoolVersion->setText(version.isEmpty() ? tr(\"exiftool not found\") : version);\n\t\tif (version.isEmpty()) {\n\t\t\tui->labelMetadataExiftoolVersion->setStyleSheet(\"color: red\");\n\t\t}\n\t});\n\twatcher->setFuture(future);\n\n\tui->lineMetadataExiftoolExtensions->setText(settings->value(\"Save/MetadataExiftoolExtensions\", \"jpg jpeg png gif mp4\").toString());\n\tconst QList<QPair<QString, QString>> metadataExiftool = getMetadataExiftool(settings);\n\tfor (const auto &pair : metadataExiftool) {\n\t\tauto *leKey = new QLineEdit(pair.first, this);\n\t\tauto *leValue = new QLineEdit(pair.second, this);\n\t\tui->layoutMetadataExiftool->addRow(leKey, leValue);\n\t\tm_metadataExiftool.append(QPair<QLineEdit*, QLineEdit*> { leKey, leValue });\n\t}\n\n\t// Log\n\tsettings->beginGroup(\"Log\");\n\t\tui->checkShowLog->setChecked(settings->value(\"show\", true).toBool());\n\tsettings->endGroup();\n\n\t// Blacklist\n\tui->textBlacklist->setPlainText(profile->getBlacklist().toString());\n\tui->checkDownloadBlacklisted->setChecked(settings->value(\"downloadblacklist\", false).toBool());\n\tnew SearchSyntaxHighlighter(false, ui->textBlacklist->document());\n\n\t// Ignored tags\n\tui->textRemovedTags->setPlainText(settings->value(\"ignoredtags\").toString());\n\tui->textIgnoredTags->setPlainText(profile->getIgnored().join('\\n'));\n\n\t// Monitoring\n\tsettings->beginGroup(\"Monitoring\");\n\t\tui->spinMonitoringStartupDelay->setValue(settings->value(\"startupDelay\", 0).toInt());\n\t\tui->checkMonitoringEnableTray->setChecked(settings->value(\"enableTray\", false).toBool());\n\t\tui->checkMonitoringMinimizeToTray->setChecked(settings->value(\"minimizeToTray\", false).toBool());\n\t\tui->checkMonitoringCloseToTray->setChecked(settings->value(\"closeToTray\", false).toBool());\n\tsettings->endGroup();\n\n\tui->checkResizeInsteadOfCropping->setChecked(settings->value(\"resizeInsteadOfCropping\", true).toBool());\n\tui->spinThumbnailUpscale->setValue(qRound(settings->value(\"thumbnailUpscale\", 1.0).toDouble() * 100));\n\tui->checkAutocompletion->setChecked(settings->value(\"autocompletion\", true).toBool());\n\tui->checkUseregexfortags->setChecked(settings->value(\"useregexfortags\", true).toBool());\n\tQStringList infiniteScroll { \"disabled\", \"button\", \"scroll\" };\n\tui->comboInfiniteScroll->setCurrentIndex(infiniteScroll.indexOf(settings->value(\"infiniteScroll\", \"disabled\").toString()));\n\tui->checkInfiniteScrollRememberPage->setChecked(settings->value(\"infiniteScrollRememberPage\", false).toBool());\n\n\t// Resize\n\tsettings->beginGroup(\"ImageSize\");\n\t\tui->spinResizeMaxWidth->setValue(settings->value(\"maxWidth\", 1000).toInt());\n\t\tui->checkResizeMaxWidth->setChecked(settings->value(\"maxWidthEnabled\", false).toBool());\n\t\tui->spinResizeMaxHeight->setValue(settings->value(\"maxHeight\", 1000).toInt());\n\t\tui->checkResizeMaxHeight->setChecked(settings->value(\"maxHeightEnabled\", false).toBool());\n\tsettings->endGroup();\n\n\t// External log files\n\tshowLogFiles(settings);\n\n\t// Web services\n\tReverseSearchLoader loader(settings);\n\tm_webServices = loader.getAllReverseSearchEngines();\n\tshowWebServices();\n\n\tui->comboBatchEnd->setCurrentIndex(settings->value(\"Batch/end\", 0).toInt());\n\tsettings->beginGroup(\"Save\");\n\t\t#ifdef Q_OS_WIN\n\t\t\tstatic const QStringList linkKeys { \"link\", /*\"symlink\",*/ \"hardlink\" };\n\t\t\tstatic const QStringList linkValues { tr(\"Shortcut\"), /*tr(\"Symbolic link\"),*/ tr(\"Hard link\") };\n\t\t#else\n\t\t\tstatic const QStringList linkKeys { \"link\", \"hardlink\" };\n\t\t\tstatic const QStringList linkValues { tr(\"Symbolic link\"), tr(\"Hard link\") };\n\t\t#endif\n\n\t\tui->spinAutomaticRetries->setValue(settings->value(\"automaticretries\", 0).toInt());\n\t\tui->checkDownloadOriginals->setChecked(settings->value(\"downloadoriginals\", true).toBool());\n\t\tui->checkSampleFallback->setChecked(settings->value(\"samplefallback\", true).toBool());\n\t\tui->checkReplaceBlanks->setChecked(settings->value(\"replaceblanks\", false).toBool());\n\t\tui->checkKeepDate->setChecked(settings->value(\"keepDate\", true).toBool());\n\t\tui->checkSaveHeaderDetection->setChecked(settings->value(\"headerDetection\", true).toBool());\n\t\tui->lineFolder->setText(settings->value(\"path_real\").toString());\n\t\tui->lineFolderFavorites->setText(settings->value(\"path_favorites\").toString());\n\t\tQStringList md5Duplicates { \"save\", \"copy\", \"move\", \"ignore\" };\n\t\tmd5Duplicates.append(linkKeys);\n\t\tui->comboMd5Duplicates->addItems(linkValues);\n\t\tui->comboMd5DuplicatesSameDir->addItems(linkValues);\n\t\tui->comboMd5Duplicates->setCurrentIndex(md5Duplicates.indexOf(settings->value(\"md5Duplicates\", \"save\").toString()));\n\t\tui->comboMd5DuplicatesSameDir->setCurrentIndex(md5Duplicates.indexOf(settings->value(\"md5DuplicatesSameDir\", \"save\").toString()));\n\t\tui->checkKeepDeletedMd5->setChecked(settings->value(\"keepDeletedMd5\", false).toBool());\n\t\tQStringList multipleFiles { \"copy\" };\n\t\tmultipleFiles.append(linkKeys);\n\t\tui->comboMultipleFiles->addItems(linkValues);\n\t\tui->comboMultipleFiles->setCurrentIndex(multipleFiles.indexOf(settings->value(\"multiple_files\", \"copy\").toString()));\n\n\t\t#ifdef Q_OS_WIN\n\t\t\t// On Windows, you might need elevated privileges to create some types of links\n\t\t\tif (!canCreateLinkType(\"hardlink\", m_profile->tempPath())) {\n\t\t\t\tconst QString &toolTip(\"You need to run Grabber as administrator to create hard links\");\n\t\t\t\tdisableItem(ui->comboMd5Duplicates, 5, toolTip);\n\t\t\t\tdisableItem(ui->comboMd5DuplicatesSameDir, 5, toolTip);\n\t\t\t\tdisableItem(ui->comboMultipleFiles, 2, toolTip);\n\t\t\t}\n\t\t#endif\n\n\t\tui->lineFilename->setText(settings->value(\"filename_real\").toString());\n\t\tui->lineFavorites->setText(settings->value(\"filename_favorites\").toString());\n\t\tui->lineSeparator->setText(settings->value(\"separator\", \" \").toString());\n\t\tui->checkNoJpeg->setChecked(settings->value(\"noJpeg\", true).toBool());\n\n\n\t\t// Build the \"tags\" settings\n\t\tauto tagsTree = ui->treeWidget->invisibleRootItem()->child(2)->child(5);\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Artist\" }, tagsTree->type()));\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Copyright\" }, tagsTree->type()));\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Character\" }, tagsTree->type()));\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Model\" }, tagsTree->type()));\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Photo set\" }, tagsTree->type()));\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Species\" }, tagsTree->type()));\n\t\ttagsTree->addChild(new QTreeWidgetItem({ \"Meta\" }, tagsTree->type()));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"artist\", false, \"anonymous\", \"multiple artists\", this));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"copyright\", true, \"misc\", \"crossover\", this));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"character\", false, \"unknown\", \"group\", this));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"model\", false, \"unknown\", \"multiple\", this));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"photo_set\", false, \"unknown\", \"multiple\", this));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"species\", false, \"unknown\", \"multiple\", this));\n\t\tm_tokenSettings.append(new TokenSettingsWidget(settings, \"meta\", false, \"none\", \"multiple\", this));\n\t\tfor (int i = 0; i < m_tokenSettings.count(); ++i) {\n\t\t\tui->stackedWidget->insertWidget(i + 9, m_tokenSettings[i]);\n\t\t}\n\n\t\tui->spinLimit->setValue(settings->value(\"limit\", 0).toInt());\n\t\tui->spinSimultaneous->setValue(settings->value(\"simultaneous\", 1).toInt());\n\tsettings->endGroup();\n\n\t// Custom tokens\n\tQMap<QString, QStringList> customs = getCustoms(settings);\n\tm_customNames = QList<QLineEdit*>();\n\tm_customTags = QList<QLineEdit*>();\n\tint i = 0;\n\tfor (auto it = customs.constBegin(); it != customs.constEnd(); ++it) {\n\t\tauto *leName = new QLineEdit(it.key());\n\t\tauto *leTags = new QLineEdit(it.value().join(\" \"));\n\t\tm_customNames.append(leName);\n\t\tm_customTags.append(leTags);\n\t\tui->layoutCustom->insertRow(i++, leName, leTags);\n\t}\n\n\t// Themes\n\tQStringList themes = m_themeLoader->getAllThemes();\n\tfor (const QString &theme : themes) {\n\t\tui->comboTheme->addItem(theme, theme);\n\t}\n\tui->comboTheme->setCurrentText(settings->value(\"theme\", \"Default\").toString());\n\n\tui->checkSingleDetailsWindow->setChecked(settings->value(\"Zoom/singleWindow\", false).toBool());\n\tconst QStringList positions { \"top\", \"left\", \"auto\" };\n\tui->comboTagsPosition->setCurrentIndex(positions.indexOf(settings->value(\"tagsposition\", \"top\").toString()));\n\tui->spinPreload->setValue(settings->value(\"preload\", 0).toInt());\n\tui->spinSlideshow->setValue(settings->value(\"slideshow\", 0).toInt());\n\n\tsettings->beginGroup(\"Main/Shortcuts\");\n\t\tui->keyMainQuit->setKeySequence(getKeySequence(settings, \"keyQuit\", QKeySequence::Quit, Qt::CTRL + Qt::Key_Q));\n\t\tui->keyMainFocusSearch->setKeySequence(getKeySequence(settings, \"keyFocusSearch\", Qt::CTRL + Qt::Key_L));\n\t\tui->keyMainCloseTab->setKeySequence(getKeySequence(settings, \"keyCloseTab\", Qt::CTRL + Qt::Key_W));\n\t\tui->keyMainNewTab->setKeySequence(getKeySequence(settings, \"keyNewTab\", QKeySequence::AddTab, Qt::CTRL + Qt::Key_T));\n\t\tui->keyMainPrevTab->setKeySequence(getKeySequence(settings, \"keyPrevTab\", Qt::CTRL + Qt::Key_PageDown));\n\t\tui->keyMainNextTab->setKeySequence(getKeySequence(settings, \"keyNextTab\", Qt::CTRL + Qt::Key_PageUp));\n\t\tui->keyMainBrowseSave->setKeySequence(getKeySequence(settings, \"keyBrowseSave\", QKeySequence::Open, Qt::CTRL + Qt::Key_O));\n\tsettings->endGroup();\n\n\tui->checkResultsScrollArea->setChecked(settings->value(\"resultsScrollArea\", true).toBool());\n\tui->checkResultsFixedWidthLayout->setChecked(settings->value(\"resultsFixedWidthLayout\", false).toBool());\n\tui->checkImageCloseMiddleClick->setChecked(settings->value(\"imageCloseMiddleClick\", true).toBool());\n\tui->checkImageNavigateScroll->setChecked(settings->value(\"imageNavigateScroll\", true).toBool());\n\tui->checkZoomShowTagCount->setChecked(settings->value(\"Zoom/showTagCount\", false).toBool());\n\tui->checkZoomViewSamples->setChecked(settings->value(\"Zoom/viewSamples\", false).toBool());\n\tui->checkImageScaleUp->setChecked(settings->value(\"Zoom/scaleUp\", false).toBool());\n\tui->checkImageUseVideoPlayer->setChecked(settings->value(\"Zoom/useVideoPlayer\", true).toBool());\n\tui->checkImageVideoControls->setChecked(settings->value(\"Zoom/showVideoPlayerControls\", true).toBool());\n\tui->checkImageGifControls->setChecked(settings->value(\"Zoom/showGifPlayerControls\", true).toBool());\n\tconst QStringList imageTagOrder { \"type\", \"name\", \"count\" };\n\tui->comboImageTagOrder->setCurrentIndex(imageTagOrder.indexOf(settings->value(\"Zoom/tagOrder\", \"type\").toString()));\n\tconst QStringList positionsV { \"top\", \"center\", \"bottom\" };\n\tconst QStringList positionsH { \"left\", \"center\", \"right\" };\n\tui->comboImagePositionImageV->setCurrentIndex(positionsV.indexOf(settings->value(\"imagePositionImageV\", \"center\").toString()));\n\tui->comboImagePositionImageH->setCurrentIndex(positionsH.indexOf(settings->value(\"imagePositionImageH\", \"left\").toString()));\n\tui->comboImagePositionAnimationV->setCurrentIndex(positionsV.indexOf(settings->value(\"imagePositionAnimationV\", \"center\").toString()));\n\tui->comboImagePositionAnimationH->setCurrentIndex(positionsH.indexOf(settings->value(\"imagePositionAnimationH\", \"left\").toString()));\n\tui->comboImagePositionVideoV->setCurrentIndex(positionsV.indexOf(settings->value(\"imagePositionVideoV\", \"center\").toString()));\n\tui->comboImagePositionVideoH->setCurrentIndex(positionsH.indexOf(settings->value(\"imagePositionVideoH\", \"left\").toString()));\n\tui->lineImageBackgroundColor->setText(settings->value(\"imageBackgroundColor\", QString()).toString());\n\n\tui->checkRememberDrawer->setChecked(settings->value(\"Zoom/rememberDrawer\", true).toBool());\n\tui->checkRememberGeometry->setChecked(settings->value(\"Zoom/rememberGeometry\", true).toBool());\n\n\tlog(\"+++Reading Zoom/Buttons+++\", Logger::Debug);\n\tinitButtonSettingPairs();\n\tloadButtonSettings(settings);\n\tcheckAllSpinners();\n\tlog(\"---Reading Zoom/Buttons---\", Logger::Debug);\n\n\tsettings->beginGroup(\"Zoom/Shortcuts\");\n\t\tui->keyViewerQuit->setKeySequence(getKeySequence(settings, \"keyQuit\", Qt::Key_Escape));\n\t\tui->keyViewerPrev->setKeySequence(getKeySequence(settings, \"keyPrev\", Qt::Key_Left));\n\t\tui->keyViewerNext->setKeySequence(getKeySequence(settings, \"keyNext\", Qt::Key_Right));\n\t\tui->keyViewerDetails->setKeySequence(getKeySequence(settings, \"keyDetails\", Qt::Key_D));\n\t\tui->keyViewerSaveAs->setKeySequence(getKeySequence(settings, \"keySaveAs\", QKeySequence::SaveAs, Qt::CTRL + Qt::SHIFT + Qt::Key_S));\n\t\tui->keyViewerSave->setKeySequence(getKeySequence(settings, \"keySave\", QKeySequence::Save, Qt::CTRL + Qt::Key_S));\n\t\tui->keyViewerSaveNQuit->setKeySequence(getKeySequence(settings, \"keySaveNQuit\", Qt::CTRL + Qt::Key_W));\n\t\tui->keyViewerOpen->setKeySequence(getKeySequence(settings, \"keyOpen\", Qt::CTRL + Qt::Key_O));\n\t\tui->keyViewerSaveFav->setKeySequence(getKeySequence(settings, \"keySaveFav\", Qt::CTRL + Qt::ALT + Qt::Key_S));\n\t\tui->keyViewerSaveNQuitFav->setKeySequence(getKeySequence(settings, \"keySaveNQuitFav\", Qt::CTRL + Qt::ALT + Qt::Key_W));\n\t\tui->keyViewerOpenFav->setKeySequence(getKeySequence(settings, \"keyOpenFav\", Qt::CTRL + Qt::ALT + Qt::Key_O));\n\t\tui->keyViewerToggleSlideshow->setKeySequence(getKeySequence(settings, \"keyToggleSlideshow\", Qt::Key_Space));\n\t\tui->keyViewerToggleFullscreen->setKeySequence(getKeySequence(settings, \"keyToggleFullscreen\", QKeySequence::FullScreen, Qt::Key_F11));\n\t\tui->keyViewerDataToClipboard->setKeySequence(getKeySequence(settings, \"keyDataToClipboard\", QKeySequence::Copy, Qt::CTRL + Qt::Key_C));\n\tsettings->endGroup();\n\n\tsettings->beginGroup(\"Coloring\");\n\t\tsettings->beginGroup(\"Colors\");\n\t\t\tui->lineColoringArtists->setText(settings->value(\"artists\", \"#aa0000\").toString());\n\t\t\tui->lineColoringCircles->setText(settings->value(\"circles\", \"#55bbff\").toString());\n\t\t\tui->lineColoringCopyrights->setText(settings->value(\"copyrights\", \"#aa00aa\").toString());\n\t\t\tui->lineColoringCharacters->setText(settings->value(\"characters\", \"#00aa00\").toString());\n\t\t\tui->lineColoringSpecies->setText(settings->value(\"species\", \"#ee6600\").toString());\n\t\t\tui->lineColoringMetas->setText(settings->value(\"metas\", \"#ee6600\").toString());\n\t\t\tui->lineColoringModels->setText(settings->value(\"models\", \"#0000ee\").toString());\n\t\t\tui->lineColoringGenerals->setText(settings->value(\"generals\", \"#000000\").toString());\n\t\t\tui->lineColoringFavorites->setText(settings->value(\"favorites\", \"#ffc0cb\").toString());\n\t\t\tui->lineColoringKeptForLater->setText(settings->value(\"keptForLater\", \"#000000\").toString());\n\t\t\tui->lineColoringBlacklisteds->setText(settings->value(\"blacklisteds\", \"#000000\").toString());\n\t\t\tui->lineColoringIgnoreds->setText(settings->value(\"ignoreds\", \"#999999\").toString());\n\t\tsettings->endGroup();\n\t\tsettings->beginGroup(\"Fonts\");\n\t\t\tui->lineColoringArtists->setFont(qFontFromString(settings->value(\"artists\").toString()));\n\t\t\tui->lineColoringCircles->setFont(qFontFromString(settings->value(\"circles\").toString()));\n\t\t\tui->lineColoringCopyrights->setFont(qFontFromString(settings->value(\"copyrights\").toString()));\n\t\t\tui->lineColoringCharacters->setFont(qFontFromString(settings->value(\"characters\").toString()));\n\t\t\tui->lineColoringSpecies->setFont(qFontFromString(settings->value(\"species\").toString()));\n\t\t\tui->lineColoringMetas->setFont(qFontFromString(settings->value(\"metas\").toString()));\n\t\t\tui->lineColoringModels->setFont(qFontFromString(settings->value(\"models\").toString()));\n\t\t\tui->lineColoringGenerals->setFont(qFontFromString(settings->value(\"generals\").toString()));\n\t\t\tui->lineColoringFavorites->setFont(qFontFromString(settings->value(\"favorites\").toString()));\n\t\t\tui->lineColoringKeptForLater->setFont(qFontFromString(settings->value(\"keptForLater\").toString()));\n\t\t\tui->lineColoringBlacklisteds->setFont(qFontFromString(settings->value(\"blacklisteds\").toString()));\n\t\t\tui->lineColoringIgnoreds->setFont(qFontFromString(settings->value(\"ignoreds\").toString()));\n\t\tsettings->endGroup();\n\tsettings->endGroup();\n\n\tsettings->beginGroup(\"Margins\");\n\t\tui->spinMainMargins->setValue(settings->value(\"main\", 10).toInt());\n\t\tui->spinHorizontalMargins->setValue(settings->value(\"horizontal\", 6).toInt());\n\t\tui->spinVerticalMargins->setValue(settings->value(\"vertical\", 6).toInt());\n\tsettings->endGroup();\n\tui->spinServerBorders->setValue(settings->value(\"serverBorder\", 0).toInt());\n\tui->lineBorderColor->setText(settings->value(\"serverBorderColor\", \"#000000\").toString());\n\tui->spinBorders->setValue(settings->value(\"borders\", 3).toInt());\n\n\tsettings->beginGroup(\"Proxy\");\n\t\tui->checkProxyUse->setChecked(settings->value(\"use\", false).toBool());\n\t\tui->checkProxyUseSystem->setChecked(settings->value(\"useSystem\", false).toBool());\n\t\tconst QStringList ptypes { \"http\", \"socks5\" };\n\t\tui->comboProxyType->setCurrentIndex(ptypes.indexOf(settings->value(\"type\", \"http\").toString()));\n\t\tui->widgetProxy->setEnabled(settings->value(\"use\", false).toBool());\n\t\tui->lineProxyHostName->setText(settings->value(\"hostName\").toString());\n\t\tui->spinProxyPort->setValue(settings->value(\"port\").toInt());\n\t\tui->lineProxyUser->setText(settings->value(\"user\").toString());\n\t\tui->lineProxyPassword->setText(settings->value(\"password\").toString());\n\tsettings->endGroup();\n\n\tsettings->beginGroup(\"Exec\");\n\t\tui->lineCommandsTagBefore->setText(settings->value(\"tag_before\").toString());\n\t\tui->lineCommandsImage->setText(settings->value(\"image\").toString());\n\t\tui->lineCommandsTagAfter->setText(settings->value(\"tag_after\", settings->value(\"tag\").toString()).toString());\n\t\tsettings->beginGroup(\"SQL\");\n\t\t\tui->comboCommandsSqlDriver->addItems(QSqlDatabase::drivers());\n\t\t\tui->comboCommandsSqlDriver->setCurrentIndex(QSqlDatabase::drivers().indexOf(settings->value(\"driver\", \"QMYSQL\").toString()));\n\t\t\tui->lineCommandsSqlHost->setText(settings->value(\"host\").toString());\n\t\t\tui->lineCommandsSqlUser->setText(settings->value(\"user\").toString());\n\t\t\tui->lineCommandsSqlPassword->setText(settings->value(\"password\").toString());\n\t\t\tui->lineCommandsSqlDatabase->setText(settings->value(\"database\").toString());\n\t\t\tui->lineCommandsSqlBefore->setText(settings->value(\"before\").toString());\n\t\t\tui->lineCommandsSqlTagBefore->setText(settings->value(\"tag_before\").toString());\n\t\t\tui->lineCommandsSqlImage->setText(settings->value(\"image\").toString());\n\t\t\tui->lineCommandsSqlTagAfter->setText(settings->value(\"tag_after\", settings->value(\"tag\").toString()).toString());\n\t\t\tui->lineCommandsSqlAfter->setText(settings->value(\"after\").toString());\n\t\tsettings->endGroup();\n\tsettings->endGroup();\n\n\tconnect(this, &QDialog::accepted, this, &OptionsWindow::save);\n}"
    },
    {
        "pr_title": "Viewer buttons",
        "pr_number": 2291,
        "file_name": "src/gui/src/settings/options-window.cpp",
        "code_diff": "@@ -1357,8 +1356,8 @@\nvoid OptionsWindow::initButtonSettingPairs()\n \t\t\tpositionSpinner\n \t\t));\n \n-\t\tQObject::connect(checker, static_cast<void (QCheckBox::*)(int)>(&QCheckBox::stateChanged), this, &OptionsWindow::checkAllSpinnersWithPlacement);\n-\t\tQObject::connect(positionSpinner, static_cast<void (QSpinBox::*)(int)>(&QSpinBox::valueChanged), this, &OptionsWindow::checkSpinners);\n+\t\tQObject::connect(checker, &QCheckBox::stateChanged, this, &OptionsWindow::checkAllSpinners);\n+\t\tQObject::connect(positionSpinner, SIGNAL(valueChanged(int)), this, SLOT(checkAllSpinners()));\n \t}\n }",
        "comments": [
            {
                "comment": "Rather than clearing everything and re-adding values, you could just use `setItemData()`.",
                "position": null
            },
            {
                "comment": "Shouldn't the default be `ZoomWindow::ButtonVisibility::All` instead? Otherwise you're casting a string here.",
                "position": null
            },
            {
                "comment": "Since you bothered to  set the item data above, you can just use `currentData()` to get the enum value directly. It's a QVariant so you might need to cast to to an int with `toInt`.",
                "position": null
            },
            {
                "comment": "If you don't want to use `setItemData`, make sure you wrap all translatable strings with the `tr()` function to make sure they're translatable.",
                "position": null
            },
            {
                "comment": "When creating new settings, try to keep them in their setting  group if possible. Here, it would be \"Zoom/actionButtons\". This allows the setting file to be more readable later. For ini files for example, it will put them in a  `[Zoom]` section together with other image  window-related settings.",
                "position": null
            },
            {
                "comment": "There are still references to ZoomWindow's enum, but those could be changed to a different namespace as I noted elsewhere.",
                "position": null
            },
            {
                "comment": "Yes, I strongly believe it would make sense to extract them to another file.\r\nIt would perfectly fit in \"custom-buttons\".",
                "position": null
            },
            {
                "comment": "Note that this won't work for:\r\n* Existing users (when I tried for examples)\r\n* New users that don't open the settings window from the \"first load\" window\r\n\r\nI think you'd be better off introducing another flag, such as \"firstload-settings\" or something.",
                "position": null
            },
            {
                "comment": "You should really start using for-range loops when using C++, it's just much more elegant \ud83d\ude01\r\nI'll push a style commit for this kind of stuff, so you can ignore this comment.",
                "position": null
            },
            {
                "comment": "Since you have the list in csPairs, you could iterate  on them?\r\nYou can do all those connections in the UI file directly, which would be even better.",
                "position": null
            },
            {
                "comment": "I thought the ZoomWindow should fall back on the intended default configuration when settings are not available. Maybe that got broken. I will investigate.",
                "position": null
            },
            {
                "comment": "They are more elegant. I have been trying to use them more since you mentioned it before but this code is from a while back. I do think there's some advantage to knowing what kind of object is being iterated just by looking at the loop though, that's why I don't have a strong preference personally.",
                "position": null
            },
            {
                "comment": "Good ideas! I'll do that.",
                "position": null
            },
            {
                "comment": "The reason I didn't do that is because I wanted all the settings related to ZoomWindow to be accessible in the same file (zoom-window.h). It feels a little more sensible and easier to maintain when buttons need to be changed. I was also hoping to keep the constants in ZoomWindow's namespace but I didn't want to instantiate them redundantly. I think I commented somewhere about that, asking whether it would be appropriate to include them as static data members. Of course, we can put all that in custom-buttons.h if you prefer.",
                "position": null
            },
            {
                "comment": "I pushed an update that does everything there in one loop. Really not sure why I didn't do that to begin with. I also have a version that makes the connections in the .ui file, but if we use that then we will have to set blockSignals(true) and then blockSignals(false) for each \"checker\" and \"spinner\". I'm afraid that would be less efficient and make the code a little messier. Do you know?",
                "position": null
            },
            {
                "comment": "Doing it code-side allows for more flexibility so you can keep the loop instead of the UI change.",
                "position": null
            },
            {
                "comment": "So when I run Grabber for the first time, the settings are written without opening the options-window. [Here](https://github.com/Bionus/imgbrd-grabber/files/7269855/grabber.log) is an example log of the console output. Does it behave differently on other platforms?\r\n\r\nI will add that flag for existing users. I thought \"first load\" meant after installation or upgrade, not just when writing a new config file.\r\n\r\n",
                "position": null
            }
        ],
        "commit_message": "Simplify spinner checks in options window",
        "commit_id": "6f23036faa306840121a727c434196fd6e0971a3",
        "fn_context": "void OptionsWindow::initButtonSettingPairs()\n{\n\tQList<QGroupBox*> buttonGroups = ui->pageInterfaceImageWindowButtons->findChildren<QGroupBox *>();\n\tQRegularExpression match(QRegularExpression::wildcardToRegularExpression(\"*Position\"));\n\n\tfor (const QGroupBox *buttonGroup : buttonGroups) {\n\t\tauto *checker = buttonGroup->findChild<QCheckBox*>(); // May break if buttonGroup contains more than one QCheckBox\n\t\tQSpinBox *positionSpinner = buttonGroup->findChildren<QSpinBox*>(match).front();\n\n\t\tm_buttonSettingPairs.append(QPair<QCheckBox*, QSpinBox*>(\n\t\t\tchecker,\n\t\t\tpositionSpinner\n\t\t));\n\n\t\tQObject::connect(checker, &QCheckBox::stateChanged, this, &OptionsWindow::checkAllSpinners);\n\t\tQObject::connect(positionSpinner, SIGNAL(valueChanged(int)), this, SLOT(checkAllSpinners()));\n\t}\n}\n\nvoid OptionsWindow::loadButtonSettings(QSettings *settings)\n{\n\tQList<ButtonSettings> buttons = settings->value(\"Zoom/allButtons\").value<QList<ButtonSettings>>();\n\n\tif (buttons.empty()) {\n\t\tlog(\"No button settings found. Writing defaults...\");\n\n\t\t// Qt Designer UI files do not allow tri-states, that we want set by default for favorites buttons\n\t\tui->checkButtonSaveFav->setCheckState(Qt::PartiallyChecked);\n\t\tui->checkButtonSaveNQuitFav->setCheckState(Qt::PartiallyChecked);\n\t\tui->checkButtonOpenFav->setCheckState(Qt::PartiallyChecked);\n\n\t\t// Use default text from the ZoomWindowButtons namespace to have a single source of truth for default values\n\t\tui->lineButtonPrev->setText(ZoomWindowButtons::DefaultPrevState.text);\n\t\tui->lineButtonNext->setText(ZoomWindowButtons::DefaultNextState.text);\n\t\tui->lineButtonDetails->setText(ZoomWindowButtons::DefaultDetailsState.text);\n\t\tui->lineButtonSaveAs->setText(ZoomWindowButtons::DefaultSaveAsState.text);\n\t\tui->lineButtonSave->setText(ZoomWindowButtons::DefaultSaveStateSave.text);\n\t\tui->lineButtonSaveNQuit->setText(ZoomWindowButtons::DefaultSaveNQuitStateSave.text);\n\t\tui->lineButtonOpen->setText(ZoomWindowButtons::DefaultOpenState.text);\n\t\tui->lineButtonSaveFav->setText(ZoomWindowButtons::DefaultSaveFavStateSave.text);\n\t\tui->lineButtonSaveNQuitFav->setText(ZoomWindowButtons::DefaultSaveNQuitFavStateSave.text);\n\t\tui->lineButtonOpenFav->setText(ZoomWindowButtons::DefaultOpenFavState.text);\n\n\t\treturn;\n\t}\n\n\tfor (const auto &button : buttons) {\n\t\tQCheckBox *checker = nullptr;\n\t\tQSpinBox *positionSpinner = nullptr;\n\t\tQSpinBox *widthSpinner = nullptr;\n\n\t\tswitch (button.type) {\n\t\t\tcase CustomButtons::IsButtonPrev :\n\t\t\t\tchecker = ui->checkButtonPrev;\n\t\t\t\tpositionSpinner = ui->spinButtonPrevPosition;\n\t\t\t\twidthSpinner = ui->spinButtonPrevWidth;\n\t\t\t\tui->lineButtonPrev->setText(button.states[0].text.isEmpty() ? ZoomWindowButtons::DefaultPrevState.text : button.states[0].text);\n\t\t\t\tbreak;\n\n\t\t\tcase CustomButtons::IsButtonNext :\n\t\t\t\tchecker = ui->checkButtonNext;\n\t\t\t\tpositionSpinner = ui->spinButtonNextPosition;\n\t\t\t\twidthSpinner = ui->spinButtonNextWidth;\n\t\t\t\tui->lineButtonNext->setText(button.states[0].text.isEmpty() ? ZoomWindowButtons::DefaultNextState.text : button.states[0].text);\n\t\t\t\tbreak;\n\n\t\t\tcase CustomButtons::IsButtonDetails :\n\t\t\t\tchecker = ui->checkButtonDetails;\n\t\t\t\tpositionSpinner = ui->spinButtonDetailsPosition;\n\t\t\t\twidthSpinner = ui->spinButtonDetailsWidth;\n\t\t\t\tui->lineButtonDetails->setText(button.states[0].text.isEmpty() ? ZoomWindowButtons::DefaultDetailsState.text : button.states[0].text);\n\t\t\t\tbreak;\n\n\t\t\tcase CustomButtons::IsButtonSaveAs :\n\t\t\t\tchecker = ui->checkButtonSaveAs;\n\t\t\t\tpositionSpinner = ui->spinButtonSaveAsPosition;\n\t\t\t\twidthSpinner = ui->spinButtonSaveAsWidth;\n\t\t\t\tui->lineButtonSaveAs->setText(button.states[0].text.isEmpty() ? ZoomWindowButtons::DefaultSaveAsState.text : button.states[0].text);\n\t\t\t\tbreak;\n\n\t\t\tcase CustomButtons::IsButtonSave:\n\t\t\t\tchecker = ui->checkButtonSave;\n\t\t\t\tpositionSpinner = ui->spinButtonSavePosition;\n\t\t\t\twidthSpinner = ui->spinButtonSaveWidth;\n\t\t\t\tui->lineButtonSave->setText(button.states[0].text.isEmpty() ? ZoomWindowButtons::DefaultSaveStateSave.text : button.states[0].text);\n\t\t\t\tbreak;\n\n\t\t\tcase CustomButtons::IsButtonSaveNQuit :\n\t\t\t\tchecker = ui->checkButtonSaveNQuit;\n\t\t\t\tpositionSpinner = ui->spinButtonSaveNQuitPosition;\n\t\t\t\twidthSpinner = ui->spinButtonSaveNQuitWidth;\n\t\t\t\tui->lineButtonSaveNQuit->setText(button.states[0].text.isEmpty() ? ZoomWindowButtons::DefaultSaveNQuitStateSave.text : button.states[0].text);\n\t\t\t\tbreak;\n\n\t\t\tcase CustomButtons::IsButtonOpen :\n\t\t\t\tchecker = ui->checkButtonOpen;\n\t\t\t\tpositionSpinner = ui->spinButtonOpenPosition;\n\t\t\t\twidthSpinner = ui->spinButtonOpenWidth;\n\t\t\t\tui->lineButtonOpen->setText(button.states[0].text.isEmpty() ? ZoomWindowButtons::DefaultOpenState.text : button.states[0].text);\n\t\t\t\tbreak;\n\n\t\t\tcase CustomButtons::IsButtonSave | CustomButtons::IsFavoriteButton :\n\t\t\t\tchecker = ui->checkButtonSaveFav;\n\t\t\t\tpositionSpinner = ui->spinButtonSaveFavPosition;\n\t\t\t\twidthSpinner = ui->spinButtonSaveFavWidth;\n\t\t\t\tui->lineButtonSaveFav->setText(button.states[0].text.isEmpty() ? ZoomWindowButtons::DefaultSaveFavStateSave.text : button.states[0].text);\n\t\t\t\tbreak;\n\n\t\t\tcase CustomButtons::IsButtonSaveNQuit | CustomButtons::IsFavoriteButton :\n\t\t\t\tchecker = ui->checkButtonSaveNQuitFav;\n\t\t\t\tpositionSpinner = ui->spinButtonSaveNQuitFavPosition;\n\t\t\t\twidthSpinner = ui->spinButtonSaveNQuitFavWidth;\n\t\t\t\tui->lineButtonSaveNQuitFav->setText(button.states[0].text.isEmpty() ? ZoomWindowButtons::DefaultSaveNQuitFavStateSave.text : button.states[0].text);\n\t\t\t\tbreak;\n\n\t\t\tcase CustomButtons::IsButtonOpen | CustomButtons::IsFavoriteButton :\n\t\t\t\tchecker = ui->checkButtonOpenFav;\n\t\t\t\tpositionSpinner = ui->spinButtonOpenFavPosition;\n\t\t\t\twidthSpinner = ui->spinButtonOpenFavWidth;\n\t\t\t\tui->lineButtonOpenFav->setText(button.states[0].text.isEmpty() ? ZoomWindowButtons::DefaultOpenFavState.text : button.states[0].text);\n\t\t\t\tbreak;\n\n\t\t\tdefault :\n\t\t\t\tlog(QStringLiteral(\"OptionsWindow found an unknown button type: %1\").arg(button.type), Logger::Error);\n\t\t\t\tcontinue;\n\t\t}\n\n\t\tchecker->setCheckState(button.isEnabled ? (button.isInDrawer ? Qt::PartiallyChecked : Qt::Checked) : Qt::Unchecked);\n\t\tpositionSpinner->setValue(button.position);\n\t\twidthSpinner->setValue(button.relativeWidth);\n\t}\n}"
    },
    {
        "pr_title": "Viewer buttons",
        "pr_number": 2291,
        "file_name": "src/gui/src/settings/options-window.cpp",
        "code_diff": "@@ -1612,69 +1611,15 @@\nvoid OptionsWindow::saveButtonSettings(QSettings *settings)\n \tsettings->setValue(\"Zoom/activeButtons\", QVariant::fromValue(active));\n }\n \n-\n-void OptionsWindow::checkSpinners(int newVal) {\n-\tstd::vector<QSpinBox*> numberMatches, colorMatches;\n-\n-\tauto *srcSpinner = qobject_cast<QSpinBox*>(sender());\n-\tQt::CheckState srcPlacement;\n-\tfor (const auto &pair : m_buttonSettingPairs) {\n-\t\tif (pair.second == srcSpinner) {\n-\t\t\tsrcPlacement = pair.first->checkState();\n-\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\tconst QColor *code = &srcSpinner->palette().color(QWidget::backgroundRole());\n-\tfor (const auto &pair : m_buttonSettingPairs) {\n-\t\tif (pair.first->checkState() != srcPlacement) {\n-\t\t\tcontinue;\n-\t\t}\n-\t\tif (srcPlacement != Qt::CheckState::Unchecked && pair.second->value() == newVal) {\n-\t\t\tnumberMatches.push_back(pair.second);\n-\t\t}\n-\t\tif (pair.second->palette().color(QWidget::backgroundRole()) == *code) {\n-\t\t\tcolorMatches.push_back(pair.second);\n-\t\t}\n-\t}\n-\n-\t// Reset alarm styles that are no longer relevant. There may be a better source than lineButitonPrev.\n-\tQColor defBack = ui->lineButtonPrev->palette().color(QWidget::backgroundRole());\n-\tQColor defText = ui->lineButtonPrev->palette().color(QWidget::foregroundRole());\n-\tstd::string defStyle(\"background-color:\" + defBack.name(QColor::HexRgb).toStdString() + \";color:\" + defText.name(QColor::HexRgb).toStdString());\n-\n-\tif (colorMatches.size() == 1 || colorMatches.size() == 2) { // Reset the previous value's style match if there is only one.\n-\t\tif (colorMatches.size() == 2) colorMatches.at(1)->setStyleSheet(defStyle.c_str());\n-\t\tcolorMatches.at(0)->setStyleSheet(defStyle.c_str());\n-\t}\n-\tif (numberMatches.size() == 1) { // Alarm style will not be set for this new value.\n-\t\tnumberMatches.at(0)->setStyleSheet(defStyle.c_str());\n-\t\treturn;\n-\t}\n-\n-\n-\t// Set alarm style on spinners with new value.\n-\tQColor alarmBack(\n-\t\t(200 - 255) * (static_cast<float>(srcPlacement + 1) / 3) + 255, // Red normalised between 200 and 255.\n-\t\t(100 - 255) * (static_cast<float>(newVal) / m_buttonSettingPairs.size()) + 255, // Green normalised between 100 and 255.\n-\t\t0\n-\t);\n-\tstd::string alarmStyle(\"background-color:\" + alarmBack.name(QColor::HexRgb).toStdString() + \";color:black;\");\n-\n-\tfor (auto it : numberMatches) { // Set alarm style on spinners with new value.\n-\t\tit->setStyleSheet(alarmStyle.c_str());\n-\t}\n-\n-\t// Would be nice to have a short transition effect. Maybe 0.4 seconds.\n-\tcolorMatches.at(0)->parentWidget()->show(); // This could be hard coded.\n-}\n-void OptionsWindow::checkAllSpinners() {\n+void OptionsWindow::checkAllSpinners()\n+{\n \tstd::vector<QSpinBox*> numberMatches;\n+\n \tfor (const auto &checker : m_buttonSettingPairs) {\n \t\tnumberMatches.clear();\n \n+\t\t// Find all other buttons with the same placement and value\n \t\tint checkVal = checker.second->value();\n-\n \t\tQt::CheckState srcPlacement = checker.first->checkState();\n \t\tfor (const auto &pair : m_buttonSettingPairs) {\n \t\t\tif (srcPlacement == Qt::CheckState::Unchecked || pair.first->checkState() != srcPlacement) {",
        "comments": [
            {
                "comment": "Rather than clearing everything and re-adding values, you could just use `setItemData()`.",
                "position": null
            },
            {
                "comment": "Shouldn't the default be `ZoomWindow::ButtonVisibility::All` instead? Otherwise you're casting a string here.",
                "position": null
            },
            {
                "comment": "Since you bothered to  set the item data above, you can just use `currentData()` to get the enum value directly. It's a QVariant so you might need to cast to to an int with `toInt`.",
                "position": null
            },
            {
                "comment": "If you don't want to use `setItemData`, make sure you wrap all translatable strings with the `tr()` function to make sure they're translatable.",
                "position": null
            },
            {
                "comment": "When creating new settings, try to keep them in their setting  group if possible. Here, it would be \"Zoom/actionButtons\". This allows the setting file to be more readable later. For ini files for example, it will put them in a  `[Zoom]` section together with other image  window-related settings.",
                "position": null
            },
            {
                "comment": "There are still references to ZoomWindow's enum, but those could be changed to a different namespace as I noted elsewhere.",
                "position": null
            },
            {
                "comment": "Yes, I strongly believe it would make sense to extract them to another file.\r\nIt would perfectly fit in \"custom-buttons\".",
                "position": null
            },
            {
                "comment": "Note that this won't work for:\r\n* Existing users (when I tried for examples)\r\n* New users that don't open the settings window from the \"first load\" window\r\n\r\nI think you'd be better off introducing another flag, such as \"firstload-settings\" or something.",
                "position": null
            },
            {
                "comment": "You should really start using for-range loops when using C++, it's just much more elegant \ud83d\ude01\r\nI'll push a style commit for this kind of stuff, so you can ignore this comment.",
                "position": null
            },
            {
                "comment": "Since you have the list in csPairs, you could iterate  on them?\r\nYou can do all those connections in the UI file directly, which would be even better.",
                "position": null
            },
            {
                "comment": "I thought the ZoomWindow should fall back on the intended default configuration when settings are not available. Maybe that got broken. I will investigate.",
                "position": null
            },
            {
                "comment": "They are more elegant. I have been trying to use them more since you mentioned it before but this code is from a while back. I do think there's some advantage to knowing what kind of object is being iterated just by looking at the loop though, that's why I don't have a strong preference personally.",
                "position": null
            },
            {
                "comment": "Good ideas! I'll do that.",
                "position": null
            },
            {
                "comment": "The reason I didn't do that is because I wanted all the settings related to ZoomWindow to be accessible in the same file (zoom-window.h). It feels a little more sensible and easier to maintain when buttons need to be changed. I was also hoping to keep the constants in ZoomWindow's namespace but I didn't want to instantiate them redundantly. I think I commented somewhere about that, asking whether it would be appropriate to include them as static data members. Of course, we can put all that in custom-buttons.h if you prefer.",
                "position": null
            },
            {
                "comment": "I pushed an update that does everything there in one loop. Really not sure why I didn't do that to begin with. I also have a version that makes the connections in the .ui file, but if we use that then we will have to set blockSignals(true) and then blockSignals(false) for each \"checker\" and \"spinner\". I'm afraid that would be less efficient and make the code a little messier. Do you know?",
                "position": null
            },
            {
                "comment": "Doing it code-side allows for more flexibility so you can keep the loop instead of the UI change.",
                "position": null
            },
            {
                "comment": "So when I run Grabber for the first time, the settings are written without opening the options-window. [Here](https://github.com/Bionus/imgbrd-grabber/files/7269855/grabber.log) is an example log of the console output. Does it behave differently on other platforms?\r\n\r\nI will add that flag for existing users. I thought \"first load\" meant after installation or upgrade, not just when writing a new config file.\r\n\r\n",
                "position": null
            }
        ],
        "commit_message": "Simplify spinner checks in options window",
        "commit_id": "6f23036faa306840121a727c434196fd6e0971a3",
        "fn_context": "void OptionsWindow::saveButtonSettings(QSettings *settings)\n{\n\t/* Note: enums make ButtonState's type more clear to read but it's probably safer to hard code unsigned shorts.\t*\n\t * This might eliminate the header dependency and enums should be logically ordered anyway.\t\t\t*/\n\n\tQList<ButtonSettings> buttons;\n\tQList<ButtonState> states;\n\n\t// Prev\n\tbuttons.append(ButtonSettings {CustomButtons::IsButtonPrev, \"Prev\",\n\t\tQList<ButtonState>({ButtonState{ZoomWindowButtons::SaveState::Save, ui->lineButtonPrev->text(), ZoomWindowButtons::DefaultPrevState.toolTip}}),\n\t\tui->checkButtonPrev->checkState() == Qt::Unchecked ? false : true,\n\t\tui->checkButtonPrev->checkState() == Qt::PartiallyChecked ? true : false,\n\t\t(unsigned short) ui->spinButtonPrevPosition->value(),\n\t\t(unsigned short) ui->spinButtonPrevWidth->value()\n\t});\n\n\t// Next\n\tbuttons.append(ButtonSettings {CustomButtons::IsButtonNext, \"Next\",\n\t\tQList<ButtonState>({ButtonState{ZoomWindowButtons::SaveState::Save, ui->lineButtonNext->text(), ZoomWindowButtons::DefaultNextState.toolTip}}),\n\t\tui->checkButtonNext->checkState() == Qt::Unchecked ? false : true,\n\t\tui->checkButtonNext->checkState() == Qt::PartiallyChecked ? true : false,\n\t\t(unsigned short) ui->spinButtonNextPosition->value(),\n\t\t(unsigned short) ui->spinButtonNextWidth->value()\n\t});\n\n\t// Details\n\tbuttons.append(ButtonSettings {CustomButtons::IsButtonDetails, \"Details\",\n\t\tQList<ButtonState>({ButtonState{ZoomWindowButtons::SaveState::Save, ui->lineButtonDetails->text(), ZoomWindowButtons::DefaultDetailsState.toolTip}}),\n\t\tui->checkButtonDetails->checkState() == Qt::Unchecked ? false : true,\n\t\tui->checkButtonDetails->checkState() == Qt::PartiallyChecked ? true : false,\n\t\t(unsigned short) ui->spinButtonDetailsPosition->value(),\n\t\t(unsigned short) ui->spinButtonDetailsWidth->value()\n\t});\n\n\t// Save as\n\tbuttons.append(ButtonSettings {CustomButtons::IsButtonSaveAs, \"SaveAs\",\n\t\tQList<ButtonState>({ButtonState{ZoomWindowButtons::SaveState::Save, ui->lineButtonSaveAs->text(), ZoomWindowButtons::DefaultSaveAsState.toolTip}}),\n\t\tui->checkButtonSaveAs->checkState() == Qt::Unchecked ? false : true,\n\t\tui->checkButtonSaveAs->checkState() == Qt::PartiallyChecked ? true : false,\n\t\t(unsigned short) ui->spinButtonSaveAsPosition->value(),\n\t\t(unsigned short) ui->spinButtonSaveAsWidth->value()\n\t});\n\n\t// Save\n\tstates.clear();\n\tstates.append(ButtonState {ZoomWindowButtons::SaveState::Save, ui->lineButtonSave->text(), ZoomWindowButtons::DefaultSaveStateSave.toolTip});\n\tstates.append(ZoomWindowButtons::DefaultSaveStateSaving);\n\tstates.append(ZoomWindowButtons::DefaultSaveStateSaved);\n\tstates.append(ZoomWindowButtons::DefaultSaveStateCopied);\n\tstates.append(ZoomWindowButtons::DefaultSaveStateMoved);\n\tstates.append(ZoomWindowButtons::DefaultSaveStateLinked);\n\tstates.append(ZoomWindowButtons::DefaultSaveStateExistsMd5);\n\tstates.append(ZoomWindowButtons::DefaultSaveStateExistsDisk);\n\tstates.append(ZoomWindowButtons::DefaultSaveStateDelete);\n\tbuttons.append(ButtonSettings {CustomButtons::IsButtonSave, \"Save\", states,\n\t\tui->checkButtonSave->checkState() == Qt::Unchecked ? false : true,\n\t\tui->checkButtonSave->checkState() == Qt::PartiallyChecked ? true : false,\n\t\t(unsigned short) ui->spinButtonSavePosition->value(),\n\t\t(unsigned short) ui->spinButtonSaveWidth->value()\n\t});\n\n\t// Save and quit\n\tstates.clear();\n\tstates.append(ButtonState {ZoomWindowButtons::SaveState::Save, ui->lineButtonSaveNQuit->text(), ZoomWindowButtons::DefaultSaveNQuitStateSave.toolTip});\n\tstates.append(ZoomWindowButtons::DefaultSaveNQuitStateSaving);\n\tstates.append(ZoomWindowButtons::DefaultSaveNQuitStateClose);\n\tbuttons.append(ButtonSettings {CustomButtons::IsButtonSaveNQuit, \"SaveNQuit\", states,\n\t\tui->checkButtonSaveNQuit->checkState() == Qt::Unchecked ? false : true,\n\t\tui->checkButtonSaveNQuit->checkState() == Qt::PartiallyChecked ? true : false,\n\t\t(unsigned short) ui->spinButtonSaveNQuitPosition->value(),\n\t\t(unsigned short) ui->spinButtonSaveNQuitWidth->value()\n\t});\n\n\t// Open\n\tbuttons.append(ButtonSettings {CustomButtons::IsButtonOpen, \"Open\",\n\t\tQList<ButtonState>({ButtonState{ZoomWindowButtons::SaveState::Save, ui->lineButtonOpen->text(), ZoomWindowButtons::DefaultOpenState.toolTip}}),\n\t\tui->checkButtonOpen->checkState() == Qt::Unchecked ? false : true,\n\t\tui->checkButtonOpen->checkState() == Qt::PartiallyChecked ? true : false,\n\t\t(unsigned short) ui->spinButtonOpenPosition->value(),\n\t\t(unsigned short) ui->spinButtonOpenWidth->value()\n\t});\n\n\t// Save (fav)\n\tstates.clear();\n\tstates.append(ButtonState {ZoomWindowButtons::SaveState::Save, ui->lineButtonSaveFav->text(), ZoomWindowButtons::DefaultSaveFavStateSave.toolTip});\n\tstates.append(ZoomWindowButtons::DefaultSaveFavStateSaving);\n\tstates.append(ZoomWindowButtons::DefaultSaveFavStateSaved);\n\tstates.append(ZoomWindowButtons::DefaultSaveFavStateCopied);\n\tstates.append(ZoomWindowButtons::DefaultSaveFavStateMoved);\n\tstates.append(ZoomWindowButtons::DefaultSaveFavStateLinked);\n\tstates.append(ZoomWindowButtons::DefaultSaveFavStateExistsMd5);\n\tstates.append(ZoomWindowButtons::DefaultSaveFavStateExistsDisk);\n\tstates.append(ZoomWindowButtons::DefaultSaveFavStateDelete);\n\tbuttons.append(ButtonSettings {CustomButtons::IsButtonSave | CustomButtons::IsFavoriteButton, \"SaveFav\", states,\n\t\tui->checkButtonSaveFav->checkState() == Qt::Unchecked ? false : true,\n\t\tui->checkButtonSaveFav->checkState() == Qt::PartiallyChecked ? true : false,\n\t\t(unsigned short) ui->spinButtonSaveFavPosition->value(),\n\t\t(unsigned short) ui->spinButtonSaveFavWidth->value()\n\t});\n\n\t// Save and quit (fav)\n\tstates.clear();\n\tstates.append(ButtonState {ZoomWindowButtons::SaveState::Save, ui->lineButtonSaveNQuitFav->text(), ZoomWindowButtons::DefaultSaveNQuitFavStateSave.toolTip});\n\tstates.append(ZoomWindowButtons::DefaultSaveNQuitFavStateSaving);\n\tstates.append(ZoomWindowButtons::DefaultSaveNQuitFavStateClose);\n\tbuttons.append(ButtonSettings {CustomButtons::IsButtonSaveNQuit | CustomButtons::IsFavoriteButton, \"SaveNQuitFav\", states,\n\t\tui->checkButtonSaveNQuitFav->checkState() == Qt::Unchecked ? false : true,\n\t\tui->checkButtonSaveNQuitFav->checkState() == Qt::PartiallyChecked ? true : false,\n\t\t(unsigned short) ui->spinButtonSaveNQuitFavPosition->value(),\n\t\t(unsigned short) ui->spinButtonSaveNQuitFavWidth->value()\n\t});\n\n\t// Open (fav)\n\tbuttons.append(ButtonSettings {CustomButtons::IsButtonOpen | CustomButtons::IsFavoriteButton, \"OpenFav\",\n\t\tQList<ButtonState>({ButtonState{ZoomWindowButtons::SaveState::Save, ui->lineButtonOpenFav->text(), ZoomWindowButtons::DefaultOpenFavState.toolTip}}),\n\t\tui->checkButtonOpenFav->checkState() == Qt::Unchecked ? false : true,\n\t\tui->checkButtonOpenFav->checkState() == Qt::PartiallyChecked ? true : false,\n\t\t(unsigned short) ui->spinButtonOpenFavPosition->value(),\n\t\t(unsigned short) ui->spinButtonOpenFavWidth->value()\n\t});\n\n\t// Write settings\n\tsettings->setValue(\"Zoom/allButtons\", QVariant::fromValue(buttons));\n\n\t// Write pre-filtered setting with only active buttons\n\tQList<ButtonSettings> active;\n\tfor (const auto &button : buttons) {\n\t\tif (button.isEnabled) {\n\t\t\tactive.append(button);\n\t\t}\n\t}\n\tstd::sort(active.begin(), active.end());\n\tsettings->setValue(\"Zoom/activeButtons\", QVariant::fromValue(active));\n}\n\nvoid OptionsWindow::checkAllSpinners()\n{\n\tstd::vector<QSpinBox*> numberMatches;\n\n\tfor (const auto &checker : m_buttonSettingPairs) {\n\t\tnumberMatches.clear();\n\n\t\t// Find all other buttons with the same placement and value\n\t\tint checkVal = checker.second->value();\n\t\tQt::CheckState srcPlacement = checker.first->checkState();\n\t\tfor (const auto &pair : m_buttonSettingPairs) {\n\t\t\tif (srcPlacement == Qt::CheckState::Unchecked || pair.first->checkState() != srcPlacement) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (pair.second->value() == checkVal) {\n\t\t\t\tnumberMatches.push_back(pair.second);\n\t\t\t}\n\t\t}\n\n\t\t// If there's only one button with this placement and value, it's valid and should not have any alert state\n\t\tif (numberMatches.size() <= 1) {\n\t\t\tchecker.second->setStyleSheet(\"\");\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Generate custom color depending on the placement and value\n\t\tQColor alarmBack(\n\t\t\t(200 - 255) * (static_cast<float>(srcPlacement + 1) / 3) + 255, // Red normalised between 200 and 255.\n\t\t\t(100 - 255) * (static_cast<float>(checkVal) / m_buttonSettingPairs.size()) + 255, // Green normalised between 100 and 255.\n\t\t\t0\n\t\t);\n\t\tstd::string alarmStyle(\"background-color:\" + alarmBack.name(QColor::HexRgb).toStdString() + \";color:black;\");\n\n\t\t// Set the alert style on relevant spinners\n\t\tfor (auto it : numberMatches) {\n\t\t\tit->setStyleSheet(alarmStyle.c_str());\n\t\t}\n\t}\n}"
    },
    {
        "pr_title": "Fix deprecations",
        "pr_number": 2192,
        "file_name": "src/gui/src/viewer/zoom-window.cpp",
        "code_diff": "@@ -433,7 +433,7 @@\nvoid ZoomWindow::display(const QPixmap &pix, int size)\n \t\tupdateWindowTitle();\n \n \t\tif (m_isFullscreen && m_fullScreen != nullptr && m_fullScreen->isVisible()) {\n-\t\t\tm_fullScreen->setImage(m_displayImage.scaled(QGuiApplication::primaryScreen()->geometry().width(), QGuiApplication::primaryScreen()->geometry().height(), Qt::KeepAspectRatio, Qt::SmoothTransformation));\n+\t\t\tm_fullScreen->setImage(m_displayImage.scaled(QGuiApplication::primaryScreen()->geometry().size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));\n \t\t}\n \t}\n }",
        "comments": [
            {
                "comment": "You could have just used `geometry().size()` to save some duplication on the call here.",
                "position": null
            },
            {
                "comment": "Same thing",
                "position": null
            },
            {
                "comment": "Same thing",
                "position": null
            },
            {
                "comment": "Replaced with size()",
                "position": null
            },
            {
                "comment": "Replaced with size()",
                "position": null
            },
            {
                "comment": "Replaced with size()",
                "position": null
            }
        ],
        "commit_message": "Replace height() and width() with size()",
        "commit_id": "a764cf923f49165ae2c4d0661229b818b4420b5e",
        "fn_context": "void ZoomWindow::display(const QPixmap &pix, int size)\n{\n\tif (!pix.size().isEmpty() && size >= m_size) {\n\t\tm_size = size;\n\t\tm_displayImage = pix;\n\t\tupdate(!m_finished);\n\n\t\tupdateWindowTitle();\n\n\t\tif (m_isFullscreen && m_fullScreen != nullptr && m_fullScreen->isVisible()) {\n\t\t\tm_fullScreen->setImage(m_displayImage.scaled(QGuiApplication::primaryScreen()->geometry().size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));\n\t\t}\n\t}\n}\n\nvoid ZoomWindow::replyFinishedDetails()\n{\n\tdisconnect(m_image.data(), &Image::finishedLoadingTags, this, &ZoomWindow::replyFinishedDetails);\n\n\tm_loadedDetails = true;\n\tcolore();\n\n\t// Show pool information\n\tif (!m_image->pools().isEmpty()) {\n\t\tauto imgPools = m_image->pools();\n\t\tQStringList pools;\n\t\tpools.reserve(imgPools.count());\n\t\tfor (const Pool &p : imgPools) {\n\t\t\tpools.append((p.previous() != 0 ? \"<a href=\\\"\" + QString::number(p.previous()) + \"\\\">&lt;</a> \" : \"\") + \"<a href=\\\"pool:\" + QString::number(p.id()) + \"\\\">\" + p.name() + \"</a>\" + (p.next() != 0 ? \" <a href=\\\"\" + QString::number(p.next()) + \"\\\">&gt;</a>\" : \"\"));\n\t\t}\n\t\tui->labelPools->setText(pools.join(QStringLiteral(\"<br />\")));\n\t\tui->labelPools->show();\n\t}\n\n\tm_isAnimated = m_image->isAnimated();\n\n\tconst QString path1 = m_settings->value(\"Save/path\").toString().replace(\"\\\\\", \"/\");\n\tconst QStringList pth1s = m_image->paths(m_settings->value(\"Save/filename\").toString(), path1, 0);\n\tQString source1;\n\tfor (const QString &pth1 : pth1s) {\n\t\tQFile file(pth1);\n\t\tif (file.exists()) {\n\t\t\tsource1 = file.fileName();\n\t\t}\n\t}\n\n\tconst QString path2 = m_settings->value(\"Save/path_favorites\").toString().replace(\"\\\\\", \"/\");\n\tconst QStringList pth2s = m_image->paths(m_settings->value(\"Save/filename_favorites\").toString(), path2, 0);\n\tQString source2;\n\tfor (const QString &pth2 : pth2s) {\n\t\tQFile file(pth2);\n\t\tif (file.exists()) {\n\t\t\tsource2 = file.fileName();\n\t\t}\n\t}\n\n\tQPair<QString, QString> md5ActionPair = m_profile->md5Action(m_image->md5(), !source1.isEmpty() ? source1 : source2);\n\tQString md5Action = md5ActionPair.first;\n\tQString md5Exists = md5ActionPair.second;\n\n\tQString imagePath = m_image->savePath();\n\n\t// If the file already exists, we directly display it\n\tif (!md5Exists.isEmpty() || !source1.isEmpty() || !source2.isEmpty()) {\n\t\timagePath = !md5Exists.isEmpty() ? md5Exists : (!source1.isEmpty() ? source1 : source2);\n\n\t\t// Update save button state\n\t\tconst SaveButtonState md5State = !md5Exists.isEmpty() && md5Action != \"save\" ? SaveButtonState::ExistsMd5 : SaveButtonState::Save;\n\t\tsetButtonState(false, !source1.isEmpty() ? SaveButtonState::ExistsDisk : md5State);\n\t\tsetButtonState(true, !source2.isEmpty() ? SaveButtonState::ExistsDisk : md5State);\n\n\t\t// Fix extension when it should be guessed\n\t\tconst QString fext = imagePath.section('.', -1);\n\t\tm_image->setFileExtension(fext);\n\n\t\t// Ensure the file actually exists before trying to set it as the source\n\t\tif (QFile::exists(imagePath)) {\n\t\t\tm_source = imagePath;\n\t\t\tm_image->setSavePath(m_source);\n\t\t}\n\t}\n\n\t// If a file to load the image from was found\n\tif (!imagePath.isEmpty() && QFile::exists(imagePath)) {\n\t\tm_imagePath = imagePath;\n\t\tlog(QStringLiteral(\"Image loaded from the file `%1`\").arg(imagePath));\n\n\t\tm_finished = true;\n\t\tm_loadedImage = true;\n\t\tpendingUpdate();\n\n\t\tdraw();\n\t}\n\t// If the file does not exist, we have to load it\n\telse {\n\t\tload();\n\t}\n\n\tupdateWindowTitle();\n}"
    },
    {
        "pr_title": "Fix deprecations",
        "pr_number": 2192,
        "file_name": "src/gui/src/viewer/zoom-window.cpp",
        "code_diff": "@@ -731,7 +731,7 @@\nvoid ZoomWindow::draw()\n \t\tupdate();\n \n \t\tif (m_isFullscreen && m_fullScreen != nullptr && m_fullScreen->isVisible()) {\n-\t\t\tm_fullScreen->setImage(m_displayImage.scaled(QGuiApplication::primaryScreen()->geometry().width(), QGuiApplication::primaryScreen()->geometry().height(), Qt::KeepAspectRatio, Qt::SmoothTransformation));\n+\t\t\tm_fullScreen->setImage(m_displayImage.scaled(QGuiApplication::primaryScreen()->geometry().size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));\n \t\t}\n \t}\n }",
        "comments": [
            {
                "comment": "You could have just used `geometry().size()` to save some duplication on the call here.",
                "position": null
            },
            {
                "comment": "Same thing",
                "position": null
            },
            {
                "comment": "Same thing",
                "position": null
            },
            {
                "comment": "Replaced with size()",
                "position": null
            },
            {
                "comment": "Replaced with size()",
                "position": null
            },
            {
                "comment": "Replaced with size()",
                "position": null
            }
        ],
        "commit_message": "Replace height() and width() with size()",
        "commit_id": "a764cf923f49165ae2c4d0661229b818b4420b5e",
        "fn_context": "void ZoomWindow::draw()\n{\n\t// Videos don't get drawn\n\tif (m_image->isVideo() && !m_settings->value(\"Zoom/useVideoPlayer\", true).toBool()) {\n\t\treturn;\n\t}\n\n\t// GIF (using QLabel support for QMovie)\n\tif (!m_isAnimated.isEmpty()) {\n\t\tm_displayMovie = new QMovie(m_imagePath, m_isAnimated.toLatin1(), this);\n\t\tm_displayMovie->start();\n\t\tconst QSize &movieSize = m_displayMovie->currentPixmap().size();\n\t\tconst QSize &imageSize = m_labelImage->size();\n\t\tif (imageSize.width() < movieSize.width() || imageSize.height() < movieSize.height()) {\n\t\t\tm_displayMovie->setScaledSize(movieSize.scaled(imageSize, Qt::KeepAspectRatio));\n\t\t}\n\t\tm_labelImage->setMovie(m_displayMovie);\n\t\tm_stackedWidget->setCurrentWidget(m_labelImage);\n\n\t\tm_displayImage = QPixmap();\n\n\t\tif (m_isFullscreen && m_fullScreen != nullptr && m_fullScreen->isVisible()) {\n\t\t\tm_fullScreen->setMovie(m_displayMovie);\n\t\t}\n\t}\n\t// Videos (using a media player)\n\telse if (m_image->isVideo()) {\n\t\tQMediaPlaylist *playlist = new QMediaPlaylist(this);\n\t\tplaylist->addMedia(QUrl::fromLocalFile(m_imagePath));\n\t\tplaylist->setPlaybackMode(QMediaPlaylist::CurrentItemInLoop);\n\n\t\tm_mediaPlayer->setPlaylist(playlist);\n\t\tm_stackedWidget->setCurrentWidget(m_videoWidget);\n\t\tm_mediaPlayer->play();\n\n\t\tm_displayImage = QPixmap();\n\t}\n\t// Images\n\telse {\n\t\tm_displayImage = QPixmap();\n\t\tm_displayImage.load(m_imagePath);\n\n\t\tupdateWindowTitle();\n\t\tupdate();\n\n\t\tif (m_isFullscreen && m_fullScreen != nullptr && m_fullScreen->isVisible()) {\n\t\t\tm_fullScreen->setImage(m_displayImage.scaled(QGuiApplication::primaryScreen()->geometry().size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));\n\t\t}\n\t}\n}"
    }
]